import 'package:hive/hive.dart';
import '../models/weather_data.dart';
import '../../services/weather_service.dart';
import '../../constants/api_constants.dart';

class WeatherRepository {
  final String _boxName = "weather_data";
  final WeatherService _weatherService;

  WeatherRepository(this._weatherService);

  Future<Box<WeatherData>> _openBox() async {
    return await Hive.openBox<WeatherData>(_boxName);
  }

  /// –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≥–æ–¥—É –∑ –∫–µ—à—É –∞–±–æ API
  Future<WeatherData> getWeather(double lat, double lon) async {
    final box = await _openBox();

    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ü—ñ—î—ó –ª–æ–∫–∞—Ü—ñ—ó
    final cachedData = box.values.where((weather) => weather.lat == lat && weather.lon == lon).toList();

    // –Ø–∫—â–æ –¥–∞–Ω—ñ —î —ñ –Ω–µ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏ ‚Äì –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —ó—Ö
    if (cachedData.isNotEmpty && !_isDataStale(cachedData.first)) {
      print("üì¶ Using cached weather data for ($lat, $lon)");
      return cachedData.first;
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤—ñ –¥–∞–Ω—ñ, —è–∫—â–æ –∫–µ—à –∑–∞—Å—Ç–∞—Ä—ñ–≤ –∞–±–æ –π–æ–≥–æ –Ω–µ–º–∞—î
    print("üå§Ô∏è Fetching fresh weather data for ($lat, $lon)");
    return await fetchWeather(lat, lon);
  }

  /// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–æ–≤—ñ –¥–∞–Ω—ñ –∑ API —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î
  Future<WeatherData> fetchWeather(double lat, double lon) async {
    final weatherData = await _weatherService.getWeather(lat, lon);

    final newData = WeatherData(
      lat: lat,
      lon: lon,
      windSpeed: weatherData['hourly']['wind_speed'][0].toDouble(),
      windDirection: weatherData['hourly']['wind_direction'][0].toDouble(),
      windGust: weatherData['hourly']['wind_gust'][0].toDouble(),
      timestamp: DateTime.now(),
      source: "API",
    );

    // –û–Ω–æ–≤–ª—é—î–º–æ –ë–î
    await _updateWeatherData(newData);

    return newData;
  }

  /// –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≥–æ–¥—É –¥–ª—è –∫—ñ–ª—å–∫–æ—Ö —Ç–æ—á–æ–∫ –º–∞—Ä—à—Ä—É—Ç—É
  Future<List<WeatherData>> getWeatherForRoute(List<Map<String, double>> routePoints) async {
    final List<WeatherData> weatherData = [];

    for (final point in routePoints) {
      final weather = await getWeather(point['lat']!, point['lon']!);
      weatherData.add(weather);
    }

    return weatherData;
  }

  /// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≥–æ–¥—É –≤ –ë–î, –≤–∏–¥–∞–ª—è—é—á–∏ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ü—ñ—î—ó –ª–æ–∫–∞—Ü—ñ—ó
  Future<void> _updateWeatherData(WeatherData data) async {
    final box = await _openBox();

    // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ü—ñ—î—ó –ª–æ–∫–∞—Ü—ñ—ó
    final oldEntries = box.values.where((entry) => entry.lat == data.lat && entry.lon == data.lon).toList();
    for (var entry in oldEntries) {
      entry.delete();
    }

    // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å
    await box.add(data);

    // –û—á–∏—â—É—î–º–æ —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö —è–∫—â–æ –∫–µ—à –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–∏–π
    if (box.length > ApiConstants.maxCacheSize) {
      await clearOldData();
    }
  }

  /// –ß–∏—Å—Ç–∏–º–æ —Å—Ç–∞—Ä—ñ –¥–∞–Ω—ñ (—Å—Ç–∞—Ä—à—ñ –∑–∞ 1 –≥–æ–¥–∏–Ω—É)
  Future<void> clearOldData() async {
    final box = await _openBox();
    final now = DateTime.now();

    final oldEntries = box.values.where((data) => now.difference(data.timestamp).inMinutes > ApiConstants.cacheExpirationMinutes).toList();

    for (var entry in oldEntries) {
      entry.delete();
    }

    print("üßπ Cleaned ${oldEntries.length} old weather records");
  }

  /// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–∞–Ω—ñ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏
  bool _isDataStale(WeatherData data) {
    final now = DateTime.now();
    return now.difference(data.timestamp).inMinutes > ApiConstants.cacheExpirationMinutes;
  }

  /// –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à—É
  Future<Map<String, dynamic>> getCacheStats() async {
    final box = await _openBox();
    final now = DateTime.now();

    final totalRecords = box.length;
    final staleRecords = box.values.where((data) => now.difference(data.timestamp).inMinutes > ApiConstants.cacheExpirationMinutes).length;

    return {
      'totalRecords': totalRecords,
      'staleRecords': staleRecords,
      'freshRecords': totalRecords - staleRecords,
      'maxCacheSize': ApiConstants.maxCacheSize,
    };
  }
}
