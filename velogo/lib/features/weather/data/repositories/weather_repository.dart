import 'package:hive/hive.dart';
import '../models/weather_data.dart';
import '../datasources/weather_service.dart';
import '../../../../core/constants/api_constants.dart';
import '../../../../services/log_service.dart';

class WeatherRepository {
  final String _boxName = "weather_data";
  final WeatherService _weatherService;

  WeatherRepository(this._weatherService);

  Future<Box<WeatherData>> _openBox() async {
    return await Hive.openBox<WeatherData>(_boxName);
  }

  /// –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≥–æ–¥—É –∑ –∫–µ—à—É –∞–±–æ API
  Future<WeatherData> getWeather(double lat, double lon) async {
    await LogService.log('üì¶ [WeatherRepository] –ó–∞–ø–∏—Ç –ø–æ–≥–æ–¥–∏: lat=$lat, lon=$lon');
    final box = await _openBox();

    // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ü—ñ—î—ó –ª–æ–∫–∞—Ü—ñ—ó
    final cachedData = box.values.where((weather) => weather.lat == lat && weather.lon == lon).toList();

    // –Ø–∫—â–æ –¥–∞–Ω—ñ —î —ñ –Ω–µ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏ ‚Äì –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —ó—Ö
    if (cachedData.isNotEmpty && !_isDataStale(cachedData.first)) {
      await LogService.log('üì¶ [WeatherRepository] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∫–µ—à–æ–≤–∞–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è ($lat, $lon)');
      print("üì¶ Using cached weather data for ($lat, $lon)");
      return cachedData.first;
    }

    // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤—ñ –¥–∞–Ω—ñ, —è–∫—â–æ –∫–µ—à –∑–∞—Å—Ç–∞—Ä—ñ–≤ –∞–±–æ –π–æ–≥–æ –Ω–µ–º–∞—î
    await LogService.log('üå§Ô∏è [WeatherRepository] –û—Ç—Ä–∏–º—É—î–º–æ —Å–≤—ñ–∂—ñ –¥–∞–Ω—ñ –¥–ª—è ($lat, $lon)');
    print("üå§Ô∏è Fetching fresh weather data for ($lat, $lon)");
    return await fetchWeather(lat, lon);
  }

  /// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–æ–≤—ñ –¥–∞–Ω—ñ –∑ API —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î
  Future<WeatherData> fetchWeather(double lat, double lon) async {
    try {
      await LogService.log('üå§Ô∏è [WeatherRepository] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑ API: lat=$lat, lon=$lon');
      final weatherData = await _weatherService.getWeather(lat, lon);

      final newData = WeatherData(
        lat: lat,
        lon: lon,
        windSpeed: weatherData['hourly']['wind_speed'][0].toDouble(),
        windDirection: weatherData['hourly']['wind_direction'][0].toDouble(),
        windGust: weatherData['hourly']['wind_gust'][0].toDouble(),
        precipitation: weatherData['hourly']['precipitation']?[0]?.toDouble() ?? 0.0,
        precipitationType: weatherData['hourly']['precipitation_type']?[0]?.toDouble() ?? 0.0,
        humidity: weatherData['hourly']['humidity']?[0]?.toDouble() ?? 50.0,
        temperature: weatherData['hourly']['temperature']?[0]?.toDouble() ?? 20.0,
        visibility: weatherData['hourly']['visibility']?[0]?.toDouble() ?? 10.0,
        roadCondition: 0.0, // –ë—É–¥–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ –ø—ñ–∑–Ω—ñ—à–µ
        timestamp: DateTime.now(),
        source: "API",
      );

      await LogService.log('üíæ [WeatherRepository] –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤—ñ –¥–∞–Ω—ñ –≤ –ë–î');
      // –û–Ω–æ–≤–ª—é—î–º–æ –ë–î
      await _updateWeatherData(newData);

      return newData;
    } catch (e) {
      await LogService.log('‚ùå [WeatherRepository] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: $e');
      rethrow;
    }
  }

  /// –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≥–æ–¥—É –¥–ª—è –∫—ñ–ª—å–∫–æ—Ö —Ç–æ—á–æ–∫ –º–∞—Ä—à—Ä—É—Ç—É
  Future<List<WeatherData>> getWeatherForRoute(List<Map<String, double>> routePoints) async {
    await LogService.log('üó∫Ô∏è [WeatherRepository] –ó–∞–ø–∏—Ç –ø–æ–≥–æ–¥–∏ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç—É: ${routePoints.length} —Ç–æ—á–æ–∫');
    final List<WeatherData> weatherData = [];

    for (int i = 0; i < routePoints.length; i++) {
      final point = routePoints[i];
      await LogService.log('üó∫Ô∏è [WeatherRepository] –û–±—Ä–æ–±–∫–∞ —Ç–æ—á–∫–∏ ${i + 1}/${routePoints.length}: lat=${point['lat']}, lon=${point['lon']}');
      final weather = await getWeather(point['lat']!, point['lon']!);
      weatherData.add(weather);
    }

    await LogService.log('‚úÖ [WeatherRepository] –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≥–æ–¥—É –¥–ª—è –≤—Å—ñ—Ö ${routePoints.length} —Ç–æ—á–æ–∫ –º–∞—Ä—à—Ä—É—Ç—É');
    return weatherData;
  }

  /// –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≥–æ–¥—É –≤ –ë–î, –≤–∏–¥–∞–ª—è—é—á–∏ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ü—ñ—î—ó –ª–æ–∫–∞—Ü—ñ—ó
  Future<void> _updateWeatherData(WeatherData data) async {
    try {
      final box = await _openBox();

      // –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä—ñ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ü—ñ—î—ó –ª–æ–∫–∞—Ü—ñ—ó
      final oldEntries = box.values.where((entry) => entry.lat == data.lat && entry.lon == data.lon).toList();
      for (var entry in oldEntries) {
        entry.delete();
      }
      await LogService.log('üóëÔ∏è [WeatherRepository] –í–∏–¥–∞–ª–µ–Ω–æ ${oldEntries.length} —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è (${data.lat}, ${data.lon})');

      // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å
      await box.add(data);
      await LogService.log('üíæ [WeatherRepository] –î–æ–¥–∞–Ω–æ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å –¥–ª—è (${data.lat}, ${data.lon})');

      // –û—á–∏—â—É—î–º–æ —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö —è–∫—â–æ –∫–µ—à –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–∏–π
      if (box.length > ApiConstants.maxCacheSize) {
        await LogService.log('‚ö†Ô∏è [WeatherRepository] –ö–µ—à –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–∏–π (${box.length}/${ApiConstants.maxCacheSize}), –æ—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä—ñ –¥–∞–Ω—ñ');
        await clearOldData();
      }
    } catch (e) {
      await LogService.log('‚ùå [WeatherRepository] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö: $e');
      rethrow;
    }
  }

  /// –ß–∏—Å—Ç–∏–º–æ —Å—Ç–∞—Ä—ñ –¥–∞–Ω—ñ (—Å—Ç–∞—Ä—à—ñ –∑–∞ 1 –≥–æ–¥–∏–Ω—É)
  Future<void> clearOldData() async {
    try {
      final box = await _openBox();
      final now = DateTime.now();

      final oldEntries = box.values.where((data) => now.difference(data.timestamp).inMinutes > ApiConstants.cacheExpirationMinutes).toList();

      for (var entry in oldEntries) {
        entry.delete();
      }

      await LogService.log('üßπ [WeatherRepository] –û—á–∏—â–µ–Ω–æ ${oldEntries.length} —Å—Ç–∞—Ä–∏—Ö –∑–∞–ø–∏—Å—ñ–≤ –ø–æ–≥–æ–¥–∏');
      print("üßπ Cleaned ${oldEntries.length} old weather records");
    } catch (e) {
      await LogService.log('‚ùå [WeatherRepository] –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö: $e');
      rethrow;
    }
  }

  /// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –¥–∞–Ω—ñ –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏
  bool _isDataStale(WeatherData data) {
    final now = DateTime.now();
    return now.difference(data.timestamp).inMinutes > ApiConstants.cacheExpirationMinutes;
  }

  /// –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à—É
  Future<Map<String, dynamic>> getCacheStats() async {
    try {
      final box = await _openBox();
      final now = DateTime.now();

      final totalRecords = box.length;
      final staleRecords = box.values.where((data) => now.difference(data.timestamp).inMinutes > ApiConstants.cacheExpirationMinutes).length;

      final stats = {
        'totalRecords': totalRecords,
        'staleRecords': staleRecords,
        'freshRecords': totalRecords - staleRecords,
        'maxCacheSize': ApiConstants.maxCacheSize,
      };

      await LogService.log('üìä [WeatherRepository] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–µ—à—É: $stats');
      return stats;
    } catch (e) {
      await LogService.log('‚ùå [WeatherRepository] –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e');
      rethrow;
    }
  }
}
