import 'package:flutter_bloc/flutter_bloc.dart';
import '../../../domain/usecases/get_weather_data_usecase.dart';
import '../../../domain/usecases/get_weather_forecast_usecase.dart';
import '../../../../../core/error/failures.dart';
import '../../../../../core/services/log_service.dart';
import 'weather_state.dart';

class WeatherCubit extends Cubit<WeatherState> {
  final GetWeatherDataUseCase _getWeatherDataUseCase;
  final GetWeatherForecastUseCase _getWeatherForecastUseCase;

  WeatherCubit({
    required GetWeatherDataUseCase getWeatherDataUseCase,
    required GetWeatherForecastUseCase getWeatherForecastUseCase,
  })  : _getWeatherDataUseCase = getWeatherDataUseCase,
        _getWeatherForecastUseCase = getWeatherForecastUseCase,
        super(const WeatherState.initial());

  /// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ–≥–æ–¥—É –¥–ª—è –æ–¥–Ω—ñ—î—ó —Ç–æ—á–∫–∏
  Future<void> loadWeather(double lat, double lon) async {
    await LogService.log('üå§Ô∏è [WeatherCubit] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏: lat=$lat, lon=$lon');
    emit(const WeatherState.loading());

    final result = await _getWeatherDataUseCase(GetWeatherDataParams(lat: lat, lon: lon));

    result.fold(
      (failure) {
        LogService.log('‚ùå [WeatherCubit] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏: ${failure.message}');
        emit(WeatherState.error(_mapFailureToMessage(failure)));
      },
      (weatherEntity) {
        LogService.log('‚úÖ [WeatherCubit] –ü–æ–≥–æ–¥—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ: windSpeed=${weatherEntity.windSpeed}, windDirection=${weatherEntity.windDirection}');
        emit(WeatherState.loaded(weatherEntity));
      },
    );
  }

  /// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ–≥–æ–¥—É –¥–ª—è –∫—ñ–ª—å–∫–æ—Ö —Ç–æ—á–æ–∫ –º–∞—Ä—à—Ä—É—Ç—É
  Future<void> loadWeatherForRoute(List<Map<String, double>> routePoints) async {
    await LogService.log('üó∫Ô∏è [WeatherCubit] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç—É: ${routePoints.length} —Ç–æ—á–æ–∫');
    emit(const WeatherState.loading());

    final result = await _getWeatherForecastUseCase(GetWeatherForecastParams(routePoints: routePoints));

    result.fold(
      (failure) {
        LogService.log('‚ùå [WeatherCubit] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç—É: ${failure.message}');
        emit(WeatherState.error(_mapFailureToMessage(failure)));
      },
      (weatherEntities) {
        LogService.log('‚úÖ [WeatherCubit] –ü–æ–≥–æ–¥—É –¥–ª—è –º–∞—Ä—à—Ä—É—Ç—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ: ${weatherEntities.length} —Ç–æ—á–æ–∫');
        emit(WeatherState.loadedForRoute(weatherEntities));
      },
    );
  }

  /// –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ
  void reset() {
    LogService.log('üîÑ [WeatherCubit] –°–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ');
    emit(const WeatherState.initial());
  }

  /// –ú–∞–ø—ñ–Ω–≥ failure –¥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  String _mapFailureToMessage(Failure failure) {
    if (failure is ServerFailure) {
      return 'Server error. Please try again later.';
    } else if (failure is NetworkFailure) {
      return 'Network error. Please check your connection.';
    } else if (failure is CacheFailure) {
      return 'Cache error. Please try again.';
    } else {
      return 'An unexpected error occurred. Please try again.';
    }
  }
}
