import 'dart:math';
import '../../../weather/data/models/weather_data.dart';
import '../models/road_surface.dart';
import '../../../weather/data/datasources/road_condition_service.dart';
import '../../../weather/data/datasources/user_speed_service.dart';
import '../../../../core/services/log_service.dart';

/// –°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –ø—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—É
class RouteDifficultyService {
  static final RouteDifficultyService _instance = RouteDifficultyService._internal();
  factory RouteDifficultyService() => _instance;
  RouteDifficultyService._internal();

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –º–∞—Ä—à—Ä—É—Ç—É
  double calculateRouteDifficulty(
    List<WeatherData> weatherDataList,
    List<RoadSurface> roadSurfaces,
    List<Map<String, double>> routePoints,
    DateTime startTime, {
    String? userId,
  }) {
    try {
      LogService.log('üéØ [RouteDifficultyService] –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –º–∞—Ä—à—Ä—É—Ç—É: ${routePoints.length} —Ç–æ—á–æ–∫');

      if (weatherDataList.isEmpty || roadSurfaces.isEmpty || routePoints.isEmpty) {
        LogService.log('‚ö†Ô∏è [RouteDifficultyService] –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É');
        return 0.0;
      }

      double totalDifficulty = 0.0;
      final userSpeedService = UserSpeedService();

      for (int i = 0; i < routePoints.length; i++) {
        final point = routePoints[i];
        final weather = i < weatherDataList.length ? weatherDataList[i] : weatherDataList.last;
        final surface = i < roadSurfaces.length ? roadSurfaces[i] : RoadSurface.asphalt;

        // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—É —à–≤–∏–¥–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        double userSpeed = 15.0; // –®–≤–∏–¥–∫—ñ—Å—Ç—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
        if (userId != null) {
          // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —à–≤–∏–¥–∫—ñ—Å—Ç—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø—É –ø–æ–∫—Ä–∏—Ç—Ç—è
          userSpeed = userSpeedService.getUserSpeedForSurface(userId, surface);
        }

        // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —á–∞—Å –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —Ü—ñ—î—ó —Ç–æ—á–∫–∏
        final distanceFromStart = _calculateDistanceFromStart(routePoints, i);
        final timeToReach = startTime.add(Duration(minutes: (distanceFromStart / userSpeed * 60).round()));

        // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –¥–ª—è —Ü—ñ—î—ó —Ç–æ—á–∫–∏
        final pointDifficulty = _calculatePointDifficulty(weather, surface, point, timeToReach, routePoints, i);
        totalDifficulty += pointDifficulty;

        LogService.log('üìç [RouteDifficultyService] –¢–æ—á–∫–∞ $i: —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å=${pointDifficulty.toStringAsFixed(2)}, –ø–æ–≤–µ—Ä—Ö–Ω—è=${surface.displayName}, —à–≤–∏–¥–∫—ñ—Å—Ç—å=${userSpeed}–∫–º/–≥–æ–¥, —á–∞—Å=$timeToReach');
      }

      final averageDifficulty = totalDifficulty / routePoints.length;
      LogService.log('‚úÖ [RouteDifficultyService] –°–µ—Ä–µ–¥–Ω—è —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç—É: ${averageDifficulty.toStringAsFixed(2)}');

      return averageDifficulty;
    } catch (e) {
      LogService.log('‚ùå [RouteDifficultyService] –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ: $e');
      return 0.0;
    }
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –¥–ª—è –æ–¥–Ω—ñ—î—ó —Ç–æ—á–∫–∏
  double _calculatePointDifficulty(
    WeatherData weather,
    RoadSurface surface,
    Map<String, double> point,
    DateTime time,
    List<Map<String, double>> routePoints,
    int currentIndex,
  ) {
    double difficulty = 0.0;

    // 1. –°—Ç–∞–Ω –¥–æ—Ä–æ–≥–∏ (–≤–ø–ª–∏–≤ –æ–ø–∞–¥—ñ–≤ –Ω–∞ –ø–æ–∫—Ä–∏—Ç—Ç—è)
    difficulty += _calculateRoadConditionDifficulty(weather, surface);

    // 2. –°—É–ø—Ä–æ—Ç–∏–≤ –≤—ñ—Ç—Ä—è–Ω–æ–º—É –ø–æ—Ç–æ–∫—É (–º–æ–∂–µ –±—É—Ç–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º –∞–±–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–º)
    difficulty += _calculateWindResistanceDifficulty(weather, point, routePoints, currentIndex);

    // 3. –£–∫–ª–æ–Ω –ª–∞–Ω–¥—à–∞—Ñ—Ç—É (–º–æ–∂–µ –±—É—Ç–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º –∞–±–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–º)
    difficulty += _calculateTerrainDifficulty(point);

    // 4. –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ–∞–∫—Ç–æ—Ä–∏
    difficulty += _calculateAdditionalFactors(weather, time);

    return difficulty;
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω –¥–æ—Ä–æ–≥–∏
  double _calculateRoadConditionDifficulty(WeatherData weather, RoadSurface surface) {
    final roadCondition = RoadConditionService().calculateRoadCondition(weather, surface);

    // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Å—Ç–∞–Ω –¥–æ—Ä–æ–≥–∏ –≤ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å (0-5)
    if (roadCondition < 0.5) {
      return 0.0; // –°—É—Ö–æ - –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
    } else if (roadCondition < 1.0) {
      return 1.0; // –ú–æ–∫—Ä–æ - –ª–µ–≥–∫–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å
    } else if (roadCondition < 2.0) {
      return 2.0; // –ë–∞–≥–Ω–∏—Å—Ç–æ - –ø–æ–º—ñ—Ä–Ω–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å
    } else if (roadCondition < 3.0) {
      return 3.5; // –î—É–∂–µ –±–∞–≥–Ω–∏—Å—Ç–æ - –≤–∏—Å–æ–∫–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å
    } else {
      return 5.0; // –ù–µ–ø—Ä–æ—Ö—ñ–¥–Ω–æ - –∫—Ä–∏—Ç–∏—á–Ω–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å
    }
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ —á–µ—Ä–µ–∑ —Å—É–ø—Ä–æ—Ç–∏–≤ –≤—ñ—Ç—Ä—è–Ω–æ–º—É –ø–æ—Ç–æ–∫—É
  double _calculateWindResistanceDifficulty(WeatherData weather, Map<String, double> point, List<Map<String, double>> routePoints, int currentIndex) {
    double difficulty = 0.0;

    // –ë–∞–∑–æ–≤–∏–π –≤–ø–ª–∏–≤ —à–≤–∏–¥–∫–æ—Å—Ç—ñ –≤—ñ—Ç—Ä—É
    final windSpeed = weather.windSpeed;
    final windDirection = weather.windDirection;
    final routeDirection = _calculateRouteDirectionInContext(routePoints, currentIndex);

    // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –≤–ø–ª–∏–≤—É –≤—ñ—Ç—Ä—É
    final windResistance = _calculateWindResistance(windDirection, routeDirection);

    // –í–ø–ª–∏–≤ –º–æ–∂–µ –±—É—Ç–∏ —è–∫ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º (–¥–æ–ø–æ–º–æ–≥–∞), —Ç–∞–∫ —ñ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–º (—Å—É–ø—Ä–æ—Ç–∏–≤)
    if (windResistance > 1.0) {
      // –°—É–ø—Ä–æ—Ç–∏–≤ –≤—ñ—Ç—Ä—É - –¥–æ–¥–∞—î–º–æ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å
      difficulty += windSpeed * 0.3 * (windResistance - 1.0);
    } else if (windResistance < 1.0) {
      // –ü–æ–ø—É—Ç–Ω–∏–π –≤—ñ—Ç–µ—Ä - –∑–º–µ–Ω—à—É—î–º–æ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å (–Ω–µ–≥–∞—Ç–∏–≤–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è)
      difficulty -= windSpeed * 0.2 * (1.0 - windResistance);
    }

    // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –≤–ø–ª–∏–≤ –ø–æ—Ä–∏–≤—ñ–≤
    if (weather.windGust > weather.windSpeed) {
      final gustImpact = (weather.windGust - weather.windSpeed) * 0.2;
      if (windResistance > 1.0) {
        difficulty += gustImpact; // –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å
      } else {
        difficulty -= gustImpact * 0.5; // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –¥–æ–ø–æ–º–æ–≥–∞
      }
    }

    return difficulty;
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ —á–µ—Ä–µ–∑ —É–∫–ª–æ–Ω –ª–∞–Ω–¥—à–∞—Ñ—Ç—É
  double _calculateTerrainDifficulty(Map<String, double> point) {
    // –û—Ç—Ä–∏–º—É—î–º–æ —É–∫–ª–æ–Ω –∑ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç—É
    final slope = point['slope'] ?? 0.0; // –£–∫–ª–æ–Ω –≤ –≥—Ä–∞–¥—É—Å–∞—Ö (–ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π = –ø—ñ–¥–π–æ–º, –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π = —Å–ø—É—Å–∫)

    // –£–∫–ª–æ–Ω –º–æ–∂–µ –±—É—Ç–∏ —è–∫ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º (–ø—ñ–¥–π–æ–º), —Ç–∞–∫ —ñ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–º (—Å–ø—É—Å–∫)
    if (slope > 0) {
      // –ü—ñ–¥–π–æ–º - –¥–æ–¥–∞—î–º–æ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å
      if (slope < 5.0) {
        return slope * 0.2; // –õ–µ–≥–∫–∏–π –ø—ñ–¥–π–æ–º
      } else if (slope < 10.0) {
        return 1.0 + (slope - 5.0) * 0.3; // –ü–æ–º—ñ—Ä–Ω–∏–π –ø—ñ–¥–π–æ–º
      } else if (slope < 15.0) {
        return 2.5 + (slope - 10.0) * 0.4; // –ö—Ä—É—Ç–∏–π –ø—ñ–¥–π–æ–º
      } else if (slope < 20.0) {
        return 4.5 + (slope - 15.0) * 0.5; // –î—É–∂–µ –∫—Ä—É—Ç–∏–π –ø—ñ–¥–π–æ–º
      } else {
        return 7.0 + (slope - 20.0) * 0.6; // –ï–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∏–π –ø—ñ–¥–π–æ–º
      }
    } else if (slope < 0) {
      // –°–ø—É—Å–∫ - –∑–º–µ–Ω—à—É—î–º–æ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å (–Ω–µ–≥–∞—Ç–∏–≤–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è)
      final absSlope = slope.abs();
      if (absSlope < 5.0) {
        return -absSlope * 0.1; // –õ–µ–≥–∫–∏–π —Å–ø—É—Å–∫ - –Ω–µ–≤–µ–ª–∏–∫–∞ –¥–æ–ø–æ–º–æ–≥–∞
      } else if (absSlope < 10.0) {
        return -0.5 - (absSlope - 5.0) * 0.2; // –ü–æ–º—ñ—Ä–Ω–∏–π —Å–ø—É—Å–∫
      } else if (absSlope < 15.0) {
        return -1.5 - (absSlope - 10.0) * 0.3; // –ö—Ä—É—Ç–∏–π —Å–ø—É—Å–∫
      } else {
        return -3.0 - (absSlope - 15.0) * 0.4; // –î—É–∂–µ –∫—Ä—É—Ç–∏–π —Å–ø—É—Å–∫
      }
    }

    return 0.0; // –†—ñ–≤–Ω–∏–Ω–∞
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Ñ–∞–∫—Ç–æ—Ä—ñ–≤
  double _calculateAdditionalFactors(WeatherData weather, DateTime time) {
    double difficulty = 0.0;

    // –í–ø–ª–∏–≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏
    if (weather.temperature < 5.0) {
      difficulty += (5.0 - weather.temperature) * 0.1; // –•–æ–ª–æ–¥
    } else if (weather.temperature > 30.0) {
      difficulty += (weather.temperature - 30.0) * 0.05; // –°–ø–µ–∫–∞
    }

    // –í–ø–ª–∏–≤ –≤–∏–¥–∏–º–æ—Å—Ç—ñ
    if (weather.visibility < 5.0) {
      difficulty += (5.0 - weather.visibility) * 0.2;
    }

    // –í–ø–ª–∏–≤ —á–∞—Å—É –¥–æ–±–∏
    final hour = time.hour;
    if (hour >= 22 || hour <= 6) {
      difficulty += 1.0; // –ù—ñ—á–Ω–∏–π —á–∞—Å
    } else if ((hour >= 7 && hour <= 9) || (hour >= 17 && hour <= 19)) {
      difficulty += 0.5; // –ì–æ–¥–∏–Ω–∏ –ø—ñ–∫
    }

    return difficulty;
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ω–∞–ø—Ä—è–º–∫—É –º–∞—Ä—à—Ä—É—Ç—É –≤ —Ç–æ—á—Ü—ñ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  double _calculateRouteDirectionInContext(List<Map<String, double>> routePoints, int currentIndex) {
    if (routePoints.isEmpty) return 0.0;

    // –Ø–∫—â–æ —Ü–µ –ø–µ—Ä—à–∞ —Ç–æ—á–∫–∞, –¥–∏–≤–∏–º–æ—Å—è –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—É
    if (currentIndex == 0) {
      if (routePoints.length > 1) {
        return _calculateRouteDirectionBetweenPoints(routePoints[0], routePoints[1]);
      }
      return 0.0;
    }

    // –Ø–∫—â–æ —Ü–µ –æ—Å—Ç–∞–Ω–Ω—è —Ç–æ—á–∫–∞, –¥–∏–≤–∏–º–æ—Å—è –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—é
    if (currentIndex == routePoints.length - 1) {
      return _calculateRouteDirectionBetweenPoints(routePoints[currentIndex - 1], routePoints[currentIndex]);
    }

    // –Ü–Ω–∞–∫—à–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–µ—Ä–µ–¥–Ω—ñ–π –Ω–∞–ø—Ä—è–º–æ–∫ –º—ñ–∂ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—é —Ç–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Ç–æ—á–∫–æ—é
    final prevDirection = _calculateRouteDirectionBetweenPoints(routePoints[currentIndex - 1], routePoints[currentIndex]);
    final nextDirection = _calculateRouteDirectionBetweenPoints(routePoints[currentIndex], routePoints[currentIndex + 1]);

    // –°–µ—Ä–µ–¥–Ω—ñ–π –Ω–∞–ø—Ä—è–º–æ–∫
    double avgDirection = (prevDirection + nextDirection) / 2.0;

    // –û–±—Ä–æ–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—É —á–µ—Ä–µ–∑ 0/360
    if ((prevDirection - nextDirection).abs() > 180) {
      if (prevDirection > nextDirection) {
        avgDirection = (prevDirection + nextDirection + 360) / 2.0;
      } else {
        avgDirection = (prevDirection + 360 + nextDirection) / 2.0;
      }
    }

    return avgDirection % 360;
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –Ω–∞–ø—Ä—è–º–∫—É –º–∞—Ä—à—Ä—É—Ç—É –º—ñ–∂ –¥–≤–æ–º–∞ —Ç–æ—á–∫–∞–º–∏
  double _calculateRouteDirectionBetweenPoints(Map<String, double> point1, Map<String, double> point2) {
    final lat1 = point1['lat']!;
    final lon1 = point1['lon']!;
    final lat2 = point2['lat']!;
    final lon2 = point2['lon']!;

    // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∞–∑–∏–º—É—Ç –º—ñ–∂ —Ç–æ—á–∫–∞–º–∏
    final dLon = _toRadians(lon2 - lon1);
    final lat1Rad = _toRadians(lat1);
    final lat2Rad = _toRadians(lat2);

    final y = sin(dLon) * cos(lat2Rad);
    final x = cos(lat1Rad) * sin(lat2Rad) - sin(lat1Rad) * cos(lat2Rad) * cos(dLon);

    double bearing = atan2(y, x);
    bearing = _toDegrees(bearing);

    // –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –¥–æ 0-360
    bearing = (bearing + 360) % 360;

    return bearing;
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∞ —Å—É–ø—Ä–æ—Ç–∏–≤—É –≤—ñ—Ç—Ä—É
  double _calculateWindResistance(double windDirection, double routeDirection) {
    // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—É—Ç –º—ñ–∂ –Ω–∞–ø—Ä—è–º–∫–æ–º –≤—ñ—Ç—Ä—É —Ç–∞ –º–∞—Ä—à—Ä—É—Ç—É
    double angle = (windDirection - routeDirection).abs();
    if (angle > 180) angle = 360 - angle;

    // –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç —Å—É–ø—Ä–æ—Ç–∏–≤—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫—É—Ç–∞
    if (angle < 45) {
      return 1.5; // –ü—Ä–æ—Ç–∏ –≤—ñ—Ç—Ä—É - —Å—É–ø—Ä–æ—Ç–∏–≤
    } else if (angle < 90) {
      return 1.2; // –ë—ñ—á–Ω–∏–π –≤—ñ—Ç–µ—Ä - –Ω–µ–≤–µ–ª–∏–∫–∏–π —Å—É–ø—Ä–æ—Ç–∏–≤
    } else if (angle < 135) {
      return 0.8; // –ü–æ–ø—É—Ç–Ω–∏–π –≤—ñ—Ç–µ—Ä - –¥–æ–ø–æ–º–æ–≥–∞
    } else {
      return 0.5; // –°–∏–ª—å–Ω–∏–π –ø–æ–ø—É—Ç–Ω–∏–π –≤—ñ—Ç–µ—Ä - —Å–∏–ª—å–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞
    }
  }

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —Ä–∞–¥—ñ–∞–Ω—ñ–≤ –≤ –≥—Ä–∞–¥—É—Å–∏
  double _toDegrees(double radians) {
    return radians * 180.0 / pi;
  }

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä—ñ–≤–Ω—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ (—Ç–µ–∫—Å—Ç–æ–≤–∏–π –æ–ø–∏—Å)
  String getDifficultyLevel(double difficulty) {
    if (difficulty < 2.0) {
      return '–õ–µ–≥–∫–∏–π';
    } else if (difficulty < 4.0) {
      return '–ü–æ–º—ñ—Ä–Ω–∏–π';
    } else if (difficulty < 6.0) {
      return '–°–∫–ª–∞–¥–Ω–∏–π';
    } else if (difficulty < 8.0) {
      return '–î—É–∂–µ —Å–∫–ª–∞–¥–Ω–∏–π';
    } else {
      return '–ï–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∏–π';
    }
  }

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
  int getDifficultyColor(double difficulty) {
    if (difficulty < 2.0) {
      return 0xFF4CAF50; // –ó–µ–ª–µ–Ω–∏–π
    } else if (difficulty < 4.0) {
      return 0xFFFF9800; // –ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π
    } else if (difficulty < 6.0) {
      return 0xFFFF5722; // –ß–µ—Ä–≤–æ–Ω–∏–π
    } else if (difficulty < 8.0) {
      return 0xFF9C27B0; // –§—ñ–æ–ª–µ—Ç–æ–≤–∏–π
    } else {
      return 0xFF000000; // –ß–æ—Ä–Ω–∏–π
    }
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –≤—ñ–¥ –ø–æ—á–∞—Ç–∫—É –º–∞—Ä—à—Ä—É—Ç—É
  double _calculateDistanceFromStart(List<Map<String, double>> routePoints, int currentIndex) {
    double totalDistance = 0.0;

    for (int i = 0; i < currentIndex; i++) {
      if (i + 1 < routePoints.length) {
        totalDistance += _calculateDistance(
          routePoints[i]['lat']!,
          routePoints[i]['lon']!,
          routePoints[i + 1]['lat']!,
          routePoints[i + 1]['lon']!,
        );
      }
    }

    return totalDistance;
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –º—ñ–∂ –¥–≤–æ–º–∞ —Ç–æ—á–∫–∞–º–∏ (–∫–º)
  double _calculateDistance(double lat1, double lon1, double lat2, double lon2) {
    const double earthRadius = 6371.0; // –∫–º

    final dLat = _toRadians(lat2 - lat1);
    final dLon = _toRadians(lon2 - lon1);

    final a = sin(dLat / 2) * sin(dLat / 2) + cos(_toRadians(lat1)) * cos(_toRadians(lat2)) * sin(dLon / 2) * sin(dLon / 2);

    final c = 2 * atan2(sqrt(a), sqrt(1 - a));

    return earthRadius * c;
  }

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≥—Ä–∞–¥—É—Å—ñ–≤ –≤ —Ä–∞–¥—ñ–∞–Ω–∏
  double _toRadians(double degrees) {
    return degrees * pi / 180.0;
  }
}
