import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:dartz/dartz.dart';
import '../../../domain/usecases/get_navigation_state_usecase.dart';
import '../../../domain/usecases/save_navigation_state_usecase.dart';
import '../../../domain/entities/navigation_entity.dart';
import '../../../../../core/error/failures.dart';
import '../../../../../core/services/log_service.dart';
import '../../../../../core/usecases/usecase.dart';
import 'navigation_state.dart';

class NavigationCubit extends Cubit<NavigationState> {
  final GetNavigationStateUseCase _getNavigationStateUseCase;
  final SaveNavigationStateUseCase _saveNavigationStateUseCase;

  NavigationCubit({
    required GetNavigationStateUseCase getNavigationStateUseCase,
    required SaveNavigationStateUseCase saveNavigationStateUseCase,
  })  : _getNavigationStateUseCase = getNavigationStateUseCase,
        _saveNavigationStateUseCase = saveNavigationStateUseCase,
        super(const NavigationState(selectedTab: NavigationTab.home));

  /// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
  Future<void> loadNavigationState() async {
    LogService.log('üß≠ [NavigationCubit] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó');
    
    final result = await _getNavigationStateUseCase(NoParams());
    
    result.fold(
      (failure) {
        LogService.log('‚ùå [NavigationCubit] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ${failure.message}');
        // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π —Å—Ç–∞–Ω –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
      },
      (navigationEntity) {
        LogService.log('‚úÖ [NavigationCubit] –°—Ç–∞–Ω –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ${navigationEntity.selectedTab}');
        emit(state.copyWith(selectedTab: navigationEntity.selectedTab));
      },
    );
  }

  /// –í–∏–±—ñ—Ä –≤–∫–ª–∞–¥–∫–∏
  Future<void> selectTab(NavigationTab tab) async {
    LogService.log('üß≠ [NavigationCubit] –í–∏–±—ñ—Ä –≤–∫–ª–∞–¥–∫–∏: $tab');
    
    emit(state.copyWith(selectedTab: tab));
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω
    final navigationEntity = NavigationEntity(
      selectedTab: tab,
      lastNavigationTime: DateTime.now(),
      currentRoute: '/${tab.name}',
    );
    
    final result = await _saveNavigationStateUseCase(SaveNavigationStateParams(
      navigationState: navigationEntity,
    ));
    
    result.fold(
      (failure) {
        LogService.log('‚ùå [NavigationCubit] –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: ${failure.message}');
      },
      (_) {
        LogService.log('‚úÖ [NavigationCubit] –°—Ç–∞–Ω –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –∑–±–µ—Ä–µ–∂–µ–Ω–æ');
      },
    );
  }
}
