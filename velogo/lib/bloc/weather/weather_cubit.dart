import 'package:flutter_bloc/flutter_bloc.dart';
import '../../hive/repositories/weather_repository.dart';
import '../../hive/models/weather_data.dart';
import '../../services/log_service.dart';

part 'weather_state.dart';

class WeatherCubit extends Cubit<WeatherState> {
  final WeatherRepository _repository;

  WeatherCubit(this._repository) : super(WeatherInitial());

  /// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ–≥–æ–¥—É –¥–ª—è –æ–¥–Ω—ñ—î—ó —Ç–æ—á–∫–∏
  Future<void> loadWeather(double lat, double lon) async {
    await LogService.log('üå§Ô∏è [WeatherCubit] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏: lat=$lat, lon=$lon');
    emit(WeatherLoading());

    try {
      final weatherData = await _repository.getWeather(lat, lon);
      await LogService.log('‚úÖ [WeatherCubit] –ü–æ–≥–æ–¥—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ: windSpeed=${weatherData.windSpeed}, windDirection=${weatherData.windDirection}');
      emit(WeatherLoaded(weatherData));
    } catch (e) {
      await LogService.log('‚ùå [WeatherCubit] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏: $e');
      emit(WeatherError("Failed to fetch weather data: ${e.toString()}"));
    }
  }

  /// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø–æ–≥–æ–¥—É –¥–ª—è –∫—ñ–ª—å–∫–æ—Ö —Ç–æ—á–æ–∫ –º–∞—Ä—à—Ä—É—Ç—É
  Future<void> loadWeatherForRoute(List<Map<String, double>> routePoints) async {
    await LogService.log('üó∫Ô∏è [WeatherCubit] –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç—É: ${routePoints.length} —Ç–æ—á–æ–∫');
    emit(WeatherLoading());

    try {
      final weatherDataList = await _repository.getWeatherForRoute(routePoints);
      await LogService.log('‚úÖ [WeatherCubit] –ü–æ–≥–æ–¥—É –¥–ª—è –º–∞—Ä—à—Ä—É—Ç—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ: ${weatherDataList.length} —Ç–æ—á–æ–∫');
      emit(WeatherLoadedForRoute(weatherDataList));
    } catch (e) {
      await LogService.log('‚ùå [WeatherCubit] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç—É: $e');
      emit(WeatherError("Failed to fetch weather data for route: ${e.toString()}"));
    }
  }

  /// –û—á–∏—â—É—î–º–æ –∫–µ—à
  Future<void> clearCache() async {
    await LogService.log('üßπ [WeatherCubit] –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É –ø–æ–≥–æ–¥–∏');
    try {
      await _repository.clearOldData();
      await LogService.log('‚úÖ [WeatherCubit] –ö–µ—à –æ—á–∏—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
      emit(WeatherCacheCleared());
    } catch (e) {
      await LogService.log('‚ùå [WeatherCubit] –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É: $e');
      emit(WeatherError("Failed to clear cache: ${e.toString()}"));
    }
  }

  /// –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à—É
  Future<void> getCacheStats() async {
    await LogService.log('üìä [WeatherCubit] –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à—É');
    try {
      final stats = await _repository.getCacheStats();
      await LogService.log('‚úÖ [WeatherCubit] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–µ—à—É –æ—Ç—Ä–∏–º–∞–Ω–æ: $stats');
      emit(WeatherCacheStats(stats));
    } catch (e) {
      await LogService.log('‚ùå [WeatherCubit] –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–µ—à—É: $e');
      emit(WeatherError("Failed to get cache stats: ${e.toString()}"));
    }
  }

  /// –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ
  void reset() {
    LogService.log('üîÑ [WeatherCubit] –°–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ');
    emit(WeatherInitial());
  }
}
