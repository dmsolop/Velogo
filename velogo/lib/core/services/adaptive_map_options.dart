import 'package:flutter/material.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:latlong2/latlong.dart';
import 'map_context_service.dart';
import 'map_zoom_calculator.dart';
import '../services/log_service.dart';

/// –ê–¥–∞–ø—Ç–∏–≤–Ω—ñ –æ–ø—Ü—ñ—ó –∫–∞—Ä—Ç–∏, —è–∫—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤—É—é—Ç—å—Å—è –ø—ñ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç
class AdaptiveMapOptions {
  final MapContext context;
  final List<LatLng>? routePoints;
  final Size screenSize;
  final LatLng? customCenter;
  final double? customZoom;
  final bool enableAutoFit;
  final double padding;

  const AdaptiveMapOptions({
    required this.context,
    this.routePoints,
    required this.screenSize,
    this.customCenter,
    this.customZoom,
    this.enableAutoFit = true,
    this.padding = 0.1,
  });

  /// –ö–æ–Ω–≤–µ—Ä—Ç—É–≤–∞—Ç–∏ –≤ MapOptions –¥–ª—è FlutterMap
  MapOptions toMapOptions() {
    LogService.log('üó∫Ô∏è [AdaptiveMapOptions] –°—Ç–≤–æ—Ä–µ–Ω–Ω—è MapOptions –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É: ${MapContextService.getContextDescription(context)}');

    final config = MapContextService.getConfig(context);
    final center = _calculateCenter();
    final zoom = _calculateZoom();

    LogService.log('üìç [AdaptiveMapOptions] –¶–µ–Ω—Ç—Ä: $center, Zoom: $zoom');

    return MapOptions(
      initialCenter: center,
      initialZoom: zoom,
      minZoom: config.minZoom,
      maxZoom: config.maxZoom,
      interactionOptions: InteractionOptions(
        flags: InteractiveFlag.all,
        rotationThreshold: 25.0,
        pinchZoomThreshold: 1.0,
        scrollWheelVelocity: 0.01,
      ),
    );
  }

  /// –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ü–µ–Ω—Ç—Ä –∫–∞—Ä—Ç–∏
  LatLng _calculateCenter() {
    // –Ø–∫—â–æ –∑–∞–¥–∞–Ω–æ –∫–∞—Å—Ç–æ–º–Ω–∏–π —Ü–µ–Ω—Ç—Ä, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ
    if (customCenter != null) {
      return customCenter!;
    }

    // –Ø–∫—â–æ —î —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç—É, —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Ü–µ–Ω—Ç—Ä
    if (routePoints != null && routePoints!.isNotEmpty) {
      return MapZoomCalculator.calculateCenter(routePoints!);
    }

    // –î–µ—Ñ–æ–ª—Ç–Ω–∏–π —Ü–µ–Ω—Ç—Ä (–î–Ω—ñ–ø—Ä–æ)
    return LatLng(48.4131760, 35.0710294);
  }

  /// –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –º–∞—Å—à—Ç–∞–± –∫–∞—Ä—Ç–∏
  double _calculateZoom() {
    // –Ø–∫—â–æ –∑–∞–¥–∞–Ω–æ –∫–∞—Å—Ç–æ–º–Ω–∏–π zoom, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ
    if (customZoom != null) {
      return customZoom!;
    }

    // –Ø–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—ñ–¥–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ —î —Ç–æ—á–∫–∏
    if (enableAutoFit && routePoints != null && routePoints!.isNotEmpty) {
      return MapZoomCalculator.calculateZoomToFit(
        points: routePoints!,
        screenSize: screenSize,
        context: context,
        padding: padding,
      );
    }

    // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π zoom
    return MapZoomCalculator.calculateOptimalZoom(
      points: routePoints ?? [],
      context: context,
      screenSize: screenSize,
    );
  }

  /// –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–ø—ñ—é –∑ –Ω–æ–≤–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  AdaptiveMapOptions copyWith({
    MapContext? context,
    List<LatLng>? routePoints,
    Size? screenSize,
    LatLng? customCenter,
    double? customZoom,
    bool? enableAutoFit,
    double? padding,
  }) {
    return AdaptiveMapOptions(
      context: context ?? this.context,
      routePoints: routePoints ?? this.routePoints,
      screenSize: screenSize ?? this.screenSize,
      customCenter: customCenter ?? this.customCenter,
      customZoom: customZoom ?? this.customZoom,
      enableAutoFit: enableAutoFit ?? this.enableAutoFit,
      padding: padding ?? this.padding,
    );
  }

  /// –§–∞–±—Ä–∏—á–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ø—Ü—ñ–π –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—É
  factory AdaptiveMapOptions.forRouteCreation({
    required Size screenSize,
    List<LatLng>? existingPoints,
    LatLng? customCenter,
  }) {
    return AdaptiveMapOptions(
      context: MapContext.routeCreation,
      routePoints: existingPoints,
      screenSize: screenSize,
      customCenter: customCenter,
      enableAutoFit: false, // –ù–µ –ø—ñ–¥–ª–∞—à—Ç–æ–≤—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ
    );
  }

  /// –§–∞–±—Ä–∏—á–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ø—Ü—ñ–π –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –º–∞—Ä—à—Ä—É—Ç—É
  factory AdaptiveMapOptions.forRouteViewing({
    required Size screenSize,
    required List<LatLng> routePoints,
    double? customZoom,
  }) {
    return AdaptiveMapOptions(
      context: MapContext.routeViewing,
      routePoints: routePoints,
      screenSize: screenSize,
      customZoom: customZoom,
      enableAutoFit: true, // –ü—ñ–¥–ª–∞—à—Ç–æ–≤—É—î–º–æ –ø—ñ–¥ –º–∞—Ä—à—Ä—É—Ç
      padding: 0.15, // –ë—ñ–ª—å—à–∏–π –≤—ñ–¥—Å—Ç—É–ø –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –æ–≥–ª—è–¥—É
    );
  }

  /// –§–∞–±—Ä–∏—á–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ø—Ü—ñ–π –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
  factory AdaptiveMapOptions.forDetailAnalysis({
    required Size screenSize,
    required LatLng centerPoint,
    double? customZoom,
  }) {
    return AdaptiveMapOptions(
      context: MapContext.detailAnalysis,
      routePoints: [centerPoint],
      screenSize: screenSize,
      customCenter: centerPoint,
      customZoom: customZoom,
      enableAutoFit: false,
    );
  }

  /// –§–∞–±—Ä–∏—á–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ø—Ü—ñ–π –¥–ª—è –ø–æ—à—É–∫—É
  factory AdaptiveMapOptions.forPointSearch({
    required Size screenSize,
    LatLng? searchCenter,
  }) {
    return AdaptiveMapOptions(
      context: MapContext.pointSearch,
      routePoints: searchCenter != null ? [searchCenter] : null,
      screenSize: screenSize,
      customCenter: searchCenter,
      enableAutoFit: false,
    );
  }

  /// –§–∞–±—Ä–∏—á–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ø—Ü—ñ–π –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
  factory AdaptiveMapOptions.forNavigation({
    required Size screenSize,
    required List<LatLng> routePoints,
    LatLng? currentLocation,
  }) {
    return AdaptiveMapOptions(
      context: MapContext.navigation,
      routePoints: routePoints,
      screenSize: screenSize,
      customCenter: currentLocation,
      enableAutoFit: false, // –ù–µ –ø—ñ–¥–ª–∞—à—Ç–æ–≤—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    );
  }

  /// –§–∞–±—Ä–∏—á–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–ø—Ü—ñ–π –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –æ–≥–ª—è–¥—É
  factory AdaptiveMapOptions.forOverview({
    required Size screenSize,
    List<LatLng>? points,
  }) {
    return AdaptiveMapOptions(
      context: MapContext.overview,
      routePoints: points,
      screenSize: screenSize,
      enableAutoFit: true,
      padding: 0.2, // –í–µ–ª–∏–∫–∏–π –≤—ñ–¥—Å—Ç—É–ø –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –æ–≥–ª—è–¥—É
    );
  }

  @override
  String toString() {
    return 'AdaptiveMapOptions(context: $context, points: ${routePoints?.length}, screen: ${screenSize.width}x${screenSize.height}, autoFit: $enableAutoFit)';
  }
}
