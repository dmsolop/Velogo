import 'dart:convert';
import 'dart:math';
import 'package:http/http.dart' as http;
import 'package:latlong2/latlong.dart';
import '../error/failures.dart';
import '../services/log_service.dart';

/// –°–µ—Ä–≤—ñ—Å –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó –ø–æ –¥–æ—Ä–æ–≥–∞—Ö
class RoadRoutingService {
  static const String _baseUrl = 'https://api.openrouteservice.org/v2/directions';
  static const String _apiKey = 'YOUR_API_KEY_HERE'; // TODO: –î–æ–¥–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏–π API –∫–ª—é—á
  
  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–∞—Ä—à—Ä—É—Ç—É –º—ñ–∂ –¥–≤–æ–º–∞ —Ç–æ—á–∫–∞–º–∏ –ø–æ –¥–æ—Ä–æ–≥–∞—Ö
  static Future<List<LatLng>> calculateRoute({
    required LatLng startPoint,
    required LatLng endPoint,
    String profile = 'driving-car', // driving-car, cycling-regular, foot-walking
  }) async {
    try {
      LogService.log('üõ£Ô∏è [RoadRoutingService] –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–∞—Ä—à—Ä—É—Ç—É: ${startPoint.latitude},${startPoint.longitude} -> ${endPoint.latitude},${endPoint.longitude}');
      
      final url = '$_baseUrl/$profile';
      final body = {
        'coordinates': [
          [startPoint.longitude, startPoint.latitude],
          [endPoint.longitude, endPoint.latitude]
        ],
        'format': 'geojson',
        'options': {
          'avoid_features': ['highways', 'tollways'],
          'preference': 'fastest',
        }
      };

      final response = await http.post(
        Uri.parse(url),
        headers: {
          'Authorization': _apiKey,
          'Content-Type': 'application/json',
        },
        body: jsonEncode(body),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final coordinates = _extractCoordinatesFromGeoJSON(data);
        LogService.log('‚úÖ [RoadRoutingService] –ú–∞—Ä—à—Ä—É—Ç —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ: ${coordinates.length} —Ç–æ—á–æ–∫');
        return coordinates;
      } else {
        LogService.log('‚ùå [RoadRoutingService] –ü–æ–º–∏–ª–∫–∞ API: ${response.statusCode} - ${response.body}');
        return _fallbackStraightLineRoute(startPoint, endPoint);
      }
    } catch (e) {
      LogService.log('‚ùå [RoadRoutingService] –ü–æ–º–∏–ª–∫–∞: $e');
      return _fallbackStraightLineRoute(startPoint, endPoint);
    }
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–∞—Ä—à—Ä—É—Ç—É —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Ç–æ—á–æ–∫
  static Future<List<LatLng>> calculateRouteWithWaypoints({
    required List<LatLng> waypoints,
    String profile = 'driving-car',
  }) async {
    if (waypoints.length < 2) {
      return waypoints;
    }

    try {
      LogService.log('üõ£Ô∏è [RoadRoutingService] –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–∞—Ä—à—Ä—É—Ç—É —á–µ—Ä–µ–∑ ${waypoints.length} —Ç–æ—á–æ–∫');
      
      final url = '$_baseUrl/$profile';
      final coordinates = waypoints.map((point) => [point.longitude, point.latitude]).toList();
      
      final body = {
        'coordinates': coordinates,
        'format': 'geojson',
        'options': {
          'avoid_features': ['highways', 'tollways'],
          'preference': 'fastest',
        }
      };

      final response = await http.post(
        Uri.parse(url),
        headers: {
          'Authorization': _apiKey,
          'Content-Type': 'application/json',
        },
        body: jsonEncode(body),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final routeCoordinates = _extractCoordinatesFromGeoJSON(data);
        LogService.log('‚úÖ [RoadRoutingService] –ú–∞—Ä—à—Ä—É—Ç —á–µ—Ä–µ–∑ ${waypoints.length} —Ç–æ—á–æ–∫ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ: ${routeCoordinates.length} —Ç–æ—á–æ–∫');
        return routeCoordinates;
      } else {
        LogService.log('‚ùå [RoadRoutingService] –ü–æ–º–∏–ª–∫–∞ API: ${response.statusCode} - ${response.body}');
        return _fallbackMultiPointRoute(waypoints);
      }
    } catch (e) {
      LogService.log('‚ùå [RoadRoutingService] –ü–æ–º–∏–ª–∫–∞: $e');
      return _fallbackMultiPointRoute(waypoints);
    }
  }

  /// –í–∏—Ç—è–≥–Ω–µ–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∑ GeoJSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
  static List<LatLng> _extractCoordinatesFromGeoJSON(Map<String, dynamic> data) {
    try {
      final features = data['features'] as List;
      if (features.isEmpty) return [];

      final geometry = features.first['geometry'];
      final coordinates = geometry['coordinates'] as List;
      
      return coordinates.map((coord) => LatLng(coord[1], coord[0])).toList();
    } catch (e) {
      LogService.log('‚ùå [RoadRoutingService] –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É GeoJSON: $e');
      return [];
    }
  }

  /// Fallback: –ø—Ä—è–º–∞ –ª—ñ–Ω—ñ—è –º—ñ–∂ –¥–≤–æ–º–∞ —Ç–æ—á–∫–∞–º–∏
  static List<LatLng> _fallbackStraightLineRoute(LatLng start, LatLng end) {
    LogService.log('‚ö†Ô∏è [RoadRoutingService] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback: –ø—Ä—è–º–∞ –ª—ñ–Ω—ñ—è');
    return [start, end];
  }

  /// Fallback: –º–∞—Ä—à—Ä—É—Ç —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Ç–æ—á–æ–∫ (–ø—Ä—è–º—ñ –ª—ñ–Ω—ñ—ó)
  static List<LatLng> _fallbackMultiPointRoute(List<LatLng> waypoints) {
    LogService.log('‚ö†Ô∏è [RoadRoutingService] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback: –ø—Ä—è–º—ñ –ª—ñ–Ω—ñ—ó —á–µ—Ä–µ–∑ ${waypoints.length} —Ç–æ—á–æ–∫');
    return waypoints;
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –º–∞—Ä—à—Ä—É—Ç—É
  static double calculateRouteDistance(List<LatLng> coordinates) {
    if (coordinates.length < 2) return 0.0;

    double totalDistance = 0.0;
    for (int i = 1; i < coordinates.length; i++) {
      totalDistance += _calculateDistance(coordinates[i - 1], coordinates[i]);
    }
    return totalDistance;
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –º—ñ–∂ –¥–≤–æ–º–∞ —Ç–æ—á–∫–∞–º–∏ (Haversine formula)
  static double _calculateDistance(LatLng point1, LatLng point2) {
    const double earthRadius = 6371000; // –†–∞–¥—ñ—É—Å –ó–µ–º–ª—ñ –≤ –º–µ—Ç—Ä–∞—Ö
    
    final lat1Rad = point1.latitude * pi / 180;
    final lat2Rad = point2.latitude * pi / 180;
    final deltaLatRad = (point2.latitude - point1.latitude) * pi / 180;
    final deltaLonRad = (point2.longitude - point1.longitude) * pi / 180;

    final a = sin(deltaLatRad / 2) * sin(deltaLatRad / 2) +
        cos(lat1Rad) * cos(lat2Rad) *
        sin(deltaLonRad / 2) * sin(deltaLonRad / 2);
    final c = 2 * atan2(sqrt(a), sqrt(1 - a));

    return earthRadius * c;
  }

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –º–∞—Ä—à—Ä—É—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ç–∏–ø—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
  static String getProfileForActivity(String activityType) {
    switch (activityType.toLowerCase()) {
      case 'cycling':
      case 'bike':
        return 'cycling-regular';
      case 'walking':
      case 'hiking':
        return 'foot-walking';
      case 'driving':
      case 'car':
      default:
        return 'driving-car';
    }
  }
}
