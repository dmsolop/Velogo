import 'dart:convert';
import 'dart:math';
import 'package:http/http.dart' as http;
import 'package:latlong2/latlong.dart';
import '../services/log_service.dart';
import 'offline_map_service.dart';
import 'remote_config_service.dart';

/// –°–µ—Ä–≤—ñ—Å –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó –ø–æ –¥–æ—Ä–æ–≥–∞—Ö
/// 
/// –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:
/// - –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –º—ñ–∂ —Ç–æ—á–∫–∞–º–∏ —á–µ—Ä–µ–∑ OpenRouteService API
/// - –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ä—ñ–∑–Ω–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—ñ–≤ (–≤–µ–ª–æ—Å–∏–ø–µ–¥, –∞–≤—Ç–æ–º–æ–±—ñ–ª—å, –ø—ñ—à–∫–∏)
/// - Fallback –Ω–∞ –ø—Ä—è–º—ñ –ª—ñ–Ω—ñ—ó –ø—Ä–∏ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É
/// - –ö–µ—à—É–≤–∞–Ω–Ω—è —Ç–∞ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –∑–∞–ø–∏—Ç—ñ–≤
/// 
/// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤: CreateRouteScreen, RouteScreen, RouteDragService
class RoadRoutingService {
  static final RemoteConfigService _remoteConfig = RemoteConfigService();

  /// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–∑'—î–¥–Ω–∞–Ω–Ω—è
  /// 
  /// –í–∏–∫–æ–Ω—É—î HTTP –∑–∞–ø–∏—Ç –¥–æ Google –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è
  /// 
  /// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤: calculateRoute(), calculateRouteWithWaypoints()
  static Future<bool> _isInternetAvailable() async {
    try {
      final response = await http.get(Uri.parse('https://www.google.com'));
      return response.statusCode == 200;
    } catch (e) {
      return false;
    }
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–∞—Ä—à—Ä—É—Ç—É –º—ñ–∂ –¥–≤–æ–º–∞ —Ç–æ—á–∫–∞–º–∏ –ø–æ –¥–æ—Ä–æ–≥–∞—Ö
  /// 
  /// –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å:
  /// - –ù–∞–º–∞–≥–∞—î—Ç—å—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ OpenRouteService API (—è–∫—â–æ —î —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç)
  /// - Fallback –Ω–∞ –ø—Ä—è–º—É –ª—ñ–Ω—ñ—é –ø—Ä–∏ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è
  /// - –ü—ñ–¥—Ç—Ä–∏–º—É—î —Ä—ñ–∑–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó
  /// 
  /// –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
  /// - startPoint: –ø–æ—á–∞—Ç–∫–æ–≤–∞ —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç—É
  /// - endPoint: –∫—ñ–Ω—Ü–µ–≤–∞ —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç—É  
  /// - profile: –ø—Ä–æ—Ñ—ñ–ª—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó (cycling-regular, driving-car, foot-walking)
  /// 
  /// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤: CreateRouteScreen._addRoutePoint(), RouteScreen._addRoutePoint()
  static Future<List<LatLng>> calculateRoute({
    required LatLng startPoint,
    required LatLng endPoint,
    String profile = 'cycling-regular', // cycling-regular, driving-car, foot-walking
  }) async {
    try {
      LogService.log('üõ£Ô∏è [RoadRoutingService] –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–∞—Ä—à—Ä—É—Ç—É: ${startPoint.latitude},${startPoint.longitude} -> ${endPoint.latitude},${endPoint.longitude}');

      // 1. –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –æ–Ω–ª–∞–π–Ω API (—è–∫—â–æ —î —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç —Ç–∞ API –∫–ª—é—á)
      final apiKey = _remoteConfig.openRouteServiceApiKey;
      final hasInternet = await _isInternetAvailable();

      LogService.log('üîç [RoadRoutingService] –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–º–æ–≤:');
      LogService.log('  - –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∏–π: $hasInternet');
      LogService.log('  - API –∫–ª—é—á: ${apiKey.substring(0, 10)}...');
      LogService.log('  - API –∫–ª—é—á –Ω–µ placeholder: ${apiKey != 'YOUR_OPENROUTESERVICE_API_KEY_HERE'}');
      LogService.log('  - API –∫–ª—é—á –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π: ${apiKey.isNotEmpty}');

      if (hasInternet && apiKey != 'YOUR_OPENROUTESERVICE_API_KEY_HERE' && apiKey.isNotEmpty) {
        LogService.log('üåê [RoadRoutingService] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ–Ω–ª–∞–π–Ω API');
        final onlineRoute = await _calculateOnlineRoute(startPoint, endPoint, profile);
        if (onlineRoute.isNotEmpty) {
          LogService.log('‚úÖ [RoadRoutingService] –û–Ω–ª–∞–π–Ω –º–∞—Ä—à—Ä—É—Ç —É—Å–ø—ñ—à–Ω–æ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ: ${onlineRoute.length} —Ç–æ—á–æ–∫');
          return onlineRoute;
        }
        LogService.log('‚ö†Ô∏è [RoadRoutingService] –û–Ω–ª–∞–π–Ω API –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –æ—Ñ–ª–∞–π–Ω –ª–æ–≥—ñ–∫–∏');
      } else {
        LogService.log('üì± [RoadRoutingService] API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –∞–±–æ –Ω–µ–º–∞—î —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ñ–ª–∞–π–Ω –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—é');
      }

      // 2. –Ø–∫—â–æ –æ–Ω–ª–∞–π–Ω API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ñ–ª–∞–π–Ω –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—é
      LogService.log('üì± [RoadRoutingService] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ñ–ª–∞–π–Ω –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—é');
      return await _calculateOfflineRoute(startPoint, endPoint, profile);
    } catch (e) {
      LogService.log('‚ùå [RoadRoutingService] –ü–æ–º–∏–ª–∫–∞: $e');
      return _fallbackStraightLineRoute(startPoint, endPoint);
    }
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–∞—Ä—à—Ä—É—Ç—É —á–µ—Ä–µ–∑ –æ–Ω–ª–∞–π–Ω API
  static Future<List<LatLng>> _calculateOnlineRoute(LatLng startPoint, LatLng endPoint, String profile) async {
    try {
      final baseUrl = _remoteConfig.openRouteServiceBaseUrl;
      final apiKey = _remoteConfig.openRouteServiceApiKey;
      final url = '$baseUrl/directions/$profile';

      // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Ç—É –¥–ª—è OpenRouteService API
      final body = {
        'coordinates': [
          [startPoint.longitude, startPoint.latitude],
          [endPoint.longitude, endPoint.latitude]
        ],
        'format': 'geojson',
        'instructions': false, // –í—ñ–¥–∫–ª—é—á–∞—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        'options': {
          'avoid_features': _getAvoidFeaturesForProfile(profile),
        }
      };

      LogService.log('üåê [RoadRoutingService] –ó–∞–ø–∏—Ç –¥–æ API: $url');
      LogService.log('üåê [RoadRoutingService] –¢—ñ–ª–æ –∑–∞–ø–∏—Ç—É: ${jsonEncode(body)}');
      LogService.log('üåê [RoadRoutingService] –ó–∞–≥–æ–ª–æ–≤–∫–∏: Authorization: Bearer ${apiKey.substring(0, 10)}...');

      final response = await http.post(
        Uri.parse(url),
        headers: {
          'Authorization': 'Bearer $apiKey', // –í–∏–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
          'Content-Type': 'application/json',
        },
        body: jsonEncode(body),
      );

      LogService.log('üåê [RoadRoutingService] –í—ñ–¥–ø–æ–≤—ñ–¥—å API: ${response.statusCode}');
      LogService.log('üåê [RoadRoutingService] –¢—ñ–ª–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${response.body}');

      if (response.statusCode != 200) {
        LogService.log('‚ùå [RoadRoutingService] –î–µ—Ç–∞–ª—å–Ω–∞ –ø–æ–º–∏–ª–∫–∞ API:');
        LogService.log('  - –°—Ç–∞—Ç—É—Å: ${response.statusCode}');
        LogService.log('  - –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${response.headers}');
        LogService.log('  - –¢—ñ–ª–æ –ø–æ–º–∏–ª–∫–∏: ${response.body}');
      }

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final coordinates = _extractCoordinatesFromGeoJSON(data);
        LogService.log('‚úÖ [RoadRoutingService] –û–Ω–ª–∞–π–Ω –º–∞—Ä—à—Ä—É—Ç —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ: ${coordinates.length} —Ç–æ—á–æ–∫');
        return coordinates;
      } else {
        LogService.log('‚ùå [RoadRoutingService] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–ª–∞–π–Ω API: ${response.statusCode} - ${response.body}');
        return [];
      }
    } catch (e) {
      LogService.log('‚ùå [RoadRoutingService] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–ª–∞–π–Ω API: $e');
      return [];
    }
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–∞—Ä—à—Ä—É—Ç—É –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º—ñ
  static Future<List<LatLng>> _calculateOfflineRoute(LatLng startPoint, LatLng endPoint, String profile) async {
    try {
      LogService.log('üì± [RoadRoutingService] –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ—Ñ–ª–∞–π–Ω –º–∞—Ä—à—Ä—É—Ç—É');

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –æ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç–∏ –¥–ª—è —Ü—ñ—î—ó –æ–±–ª–∞—Å—Ç—ñ
      final hasOfflineMaps = await _hasOfflineMapsForArea(startPoint, endPoint);

      if (hasOfflineMaps) {
        LogService.log('üó∫Ô∏è [RoadRoutingService] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç–∏ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó');
        return await _calculateRouteWithOfflineMaps(startPoint, endPoint, profile);
      } else {
        LogService.log('‚ö†Ô∏è [RoadRoutingService] –û—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–æ–∑—É–º–Ω–∏–π fallback');
        return _calculateSmartRoute(startPoint, endPoint, profile);
      }
    } catch (e) {
      LogService.log('‚ùå [RoadRoutingService] –ü–æ–º–∏–ª–∫–∞ –æ—Ñ–ª–∞–π–Ω –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó: $e');
      return _fallbackStraightLineRoute(startPoint, endPoint);
    }
  }

  /// –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —î –æ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç–∏ –¥–ª—è –æ–±–ª–∞—Å—Ç—ñ
  static Future<bool> _hasOfflineMapsForArea(LatLng start, LatLng end) async {
    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫—ñ–ª—å–∫–∞ —Ç–∞–π–ª—ñ–≤ –Ω–∞ —Ä—ñ–∑–Ω–∏—Ö —Ä—ñ–≤–Ω—è—Ö zoom
      final testZoom = 14; // –°–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å –¥–µ—Ç–∞–ª—ñ–∑–∞—Ü—ñ—ó
      final testTiles = [
        _latLngToTile(start.latitude, start.longitude, testZoom),
        _latLngToTile(end.latitude, end.longitude, testZoom),
        _latLngToTile((start.latitude + end.latitude) / 2, (start.longitude + end.longitude) / 2, testZoom),
      ];

      for (final tile in testTiles) {
        final isCached = await OfflineMapService.isTileCached(tile.x, tile.y, testZoom);
        if (!isCached) {
          return false;
        }
      }

      return true;
    } catch (e) {
      LogService.log('‚ùå [RoadRoutingService] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç: $e');
      return false;
    }
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–∞—Ä—à—Ä—É—Ç—É –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º –æ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç
  static Future<List<LatLng>> _calculateRouteWithOfflineMaps(LatLng start, LatLng end, String profile) async {
    // –¢—É—Ç –º–æ–∂–Ω–∞ —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∫–ª–∞–¥–Ω—É –ª–æ–≥—ñ–∫—É –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ—Ñ–ª–∞–π–Ω –∫–∞—Ä—Ç
    // –ü–æ–∫–∏ —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä–æ–∑—É–º–Ω–∏–π fallback
    return _calculateSmartRoute(start, end, profile);
  }

  /// –†–æ–∑—É–º–Ω–∏–π fallback –º–∞—Ä—à—Ä—É—Ç (–Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä—è–º–∞ –ª—ñ–Ω—ñ—è)
  static List<LatLng> _calculateSmartRoute(LatLng start, LatLng end, String profile) {
    LogService.log('üß† [RoadRoutingService] –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ä–æ–∑—É–º–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç—É –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é: $profile');

    // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤—ñ–¥—Å—Ç–∞–Ω—å
    final distance = _calculateDistance(start, end);

    // –Ø–∫—â–æ –≤—ñ–¥—Å—Ç–∞–Ω—å –Ω–µ–≤–µ–ª–∏–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä—è–º—É –ª—ñ–Ω—ñ—é
    if (distance < 0.3) {
      // –º–µ–Ω—à–µ 300–º
      LogService.log('üìè [RoadRoutingService] –ö–æ—Ä–æ—Ç–∫–∞ –≤—ñ–¥—Å—Ç–∞–Ω—å (${distance.toStringAsFixed(2)}–∫–º), –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä—è–º—É –ª—ñ–Ω—ñ—é');
      return [start, end];
    }

    // –î–ª—è –±—ñ–ª—å—à–∏—Ö –≤—ñ–¥—Å—Ç–∞–Ω–µ–π –¥–æ–¥–∞—î–º–æ –ø—Ä–æ–º—ñ–∂–Ω—ñ —Ç–æ—á–∫–∏ –¥–ª—è –±—ñ–ª—å—à —Ä–µ–∞–ª—ñ—Å—Ç–∏—á–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç—É
    final numPoints = (distance * 3).round().clamp(4, 15); // 3 —Ç–æ—á–∫–∏ –Ω–∞ –∫–º, –º—ñ–Ω—ñ–º—É–º 4, –º–∞–∫—Å–∏–º—É–º 15
    final points = <LatLng>[];

    for (int i = 0; i < numPoints; i++) {
      final ratio = i / (numPoints - 1);
      final lat = start.latitude + (end.latitude - start.latitude) * ratio;
      final lng = start.longitude + (end.longitude - start.longitude) * ratio;

      // –î–æ–¥–∞—î–º–æ –Ω–µ–≤–µ–ª–∏–∫—ñ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è –¥–ª—è —ñ–º—ñ—Ç–∞—Ü—ñ—ó –¥–æ—Ä—ñ–≥
      // –†—ñ–∑–Ω—ñ –ø—Ä–æ—Ñ—ñ–ª—ñ –º–∞—é—Ç—å —Ä—ñ–∑–Ω—ñ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
      double deviation = 0.0;
      switch (profile) {
        case 'cycling-regular':
          // –í–µ–ª–æ—Å–∏–ø–µ–¥–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –±—ñ–ª—å—à –∑–≤–∏–≤–∏—Å—Ç–∏–º–∏
          deviation = 0.0002 * sin(ratio * pi * 4) + 0.0001 * cos(ratio * pi * 2);
          break;
        case 'foot-walking':
          // –ü—ñ—à–æ—Ö—ñ–¥–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –Ω–∞–π–±—ñ–ª—å—à –∑–≤–∏–≤–∏—Å—Ç–∏–º–∏
          deviation = 0.0003 * sin(ratio * pi * 5) + 0.0002 * cos(ratio * pi * 3);
          break;
        case 'driving-car':
        default:
          // –ê–≤—Ç–æ–º–æ–±—ñ–ª—å–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏ –Ω–∞–π–º–µ–Ω—à –∑–≤–∏–≤–∏—Å—Ç—ñ
          deviation = 0.0001 * sin(ratio * pi * 3) + 0.00005 * cos(ratio * pi * 2);
          break;
      }

      points.add(LatLng(lat + deviation, lng + deviation * 0.3));
    }

    LogService.log('‚úÖ [RoadRoutingService] –†–æ–∑—É–º–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç: ${points.length} —Ç–æ—á–æ–∫, –≤—ñ–¥—Å—Ç–∞–Ω—å: ${distance.toStringAsFixed(2)}–∫–º');
    return points;
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–∞—Ä—à—Ä—É—Ç—É —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ –ø—Ä–æ–º—ñ–∂–Ω–∏—Ö —Ç–æ—á–æ–∫
  /// 
  /// –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å:
  /// - –†–æ–∑—Ä–∞—Ö–æ–≤—É—î –º–∞—Ä—à—Ä—É—Ç —á–µ—Ä–µ–∑ –≤—Å—ñ –ø–µ—Ä–µ–¥–∞–Ω—ñ waypoints
  /// - –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î OpenRouteService API –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç—É
  /// - –ü–æ–≤–µ—Ä—Ç–∞—î –≤—Å—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –º–∞—Ä—à—Ä—É—Ç—É
  /// 
  /// –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
  /// - waypoints: —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º—ñ–∂–Ω–∏—Ö —Ç–æ—á–æ–∫ –º–∞—Ä—à—Ä—É—Ç—É
  /// - profile: –ø—Ä–æ—Ñ—ñ–ª—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó
  /// 
  /// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤: CreateRouteScreen._moveRouteSection()
  static Future<List<LatLng>> calculateRouteWithWaypoints({
    required List<LatLng> waypoints,
    String profile = 'cycling-regular',
  }) async {
    if (waypoints.length < 2) {
      return waypoints;
    }

    try {
      LogService.log('üõ£Ô∏è [RoadRoutingService] –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –º–∞—Ä—à—Ä—É—Ç—É —á–µ—Ä–µ–∑ ${waypoints.length} —Ç–æ—á–æ–∫');

      final baseUrl = _remoteConfig.openRouteServiceBaseUrl;
      final url = '$baseUrl/directions/$profile';
      final coordinates = waypoints.map((point) => [point.longitude, point.latitude]).toList();

      final body = {
        'coordinates': coordinates,
        'format': 'geojson',
        'instructions': false, // –í—ñ–¥–∫–ª—é—á–∞—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        'options': {
          'avoid_features': _getAvoidFeaturesForProfile(profile),
        }
      };

      final response = await http.post(
        Uri.parse(url),
        headers: {
          'Authorization': 'Bearer ${_remoteConfig.openRouteServiceApiKey}',
          'Content-Type': 'application/json',
        },
        body: jsonEncode(body),
      );

      if (response.statusCode == 200) {
        final data = jsonDecode(response.body);
        final routeCoordinates = _extractCoordinatesFromGeoJSON(data);
        LogService.log('‚úÖ [RoadRoutingService] –ú–∞—Ä—à—Ä—É—Ç —á–µ—Ä–µ–∑ ${waypoints.length} —Ç–æ—á–æ–∫ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–æ: ${routeCoordinates.length} —Ç–æ—á–æ–∫');
        return routeCoordinates;
      } else {
        LogService.log('‚ùå [RoadRoutingService] –ü–æ–º–∏–ª–∫–∞ API: ${response.statusCode} - ${response.body}');
        return _fallbackMultiPointRoute(waypoints);
      }
    } catch (e) {
      LogService.log('‚ùå [RoadRoutingService] –ü–æ–º–∏–ª–∫–∞: $e');
      return _fallbackMultiPointRoute(waypoints);
    }
  }

  /// –í–∏—Ç—è–≥–Ω–µ–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∑ GeoJSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
  static List<LatLng> _extractCoordinatesFromGeoJSON(Map<String, dynamic> data) {
    try {
      LogService.log('üîç [RoadRoutingService] –ü–∞—Ä—Å–∏–Ω–≥ GeoJSON –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ...');
      LogService.log('üîç [RoadRoutingService] –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–∏—Ö: ${data.keys.toList()}');

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î routes (OpenRouteService —Ñ–æ—Ä–º–∞—Ç)
      if (data.containsKey('routes')) {
        final routes = data['routes'] as List;
        if (routes.isNotEmpty) {
          final route = routes.first;
          LogService.log('üîç [RoadRoutingService] –ó–Ω–∞–π–¥–µ–Ω–æ route: ${route.keys.toList()}');

          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ geometry –≤ route
          if (route.containsKey('geometry')) {
            final geometry = route['geometry'];
            LogService.log('üîç [RoadRoutingService] Geometry —Ç–∏–ø: ${geometry.runtimeType}');

            // –Ø–∫—â–æ geometry —î encoded polyline string
            if (geometry is String) {
              LogService.log('üîç [RoadRoutingService] Geometry —î encoded polyline string, –¥–µ–∫–æ–¥—É—î–º–æ...');
              return _decodePolyline(geometry);
            }

            // –Ø–∫—â–æ geometry —î –æ–±'—î–∫—Ç–æ–º –∑ coordinates
            if (geometry is Map && geometry.containsKey('coordinates')) {
              final coordinates = geometry['coordinates'] as List;
              LogService.log('üîç [RoadRoutingService] –ó–Ω–∞–π–¥–µ–Ω–æ coordinates: ${coordinates.length} —Ç–æ—á–æ–∫');
              return coordinates.map((coord) => LatLng(coord[1], coord[0])).toList();
            }
          }
        }
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î features (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π GeoJSON —Ñ–æ—Ä–º–∞—Ç)
      if (data.containsKey('features')) {
        final features = data['features'] as List;
        if (features.isNotEmpty) {
          final feature = features.first;
          LogService.log('üîç [RoadRoutingService] –ó–Ω–∞–π–¥–µ–Ω–æ feature: ${feature.keys.toList()}');

          if (feature.containsKey('geometry')) {
            final geometry = feature['geometry'];
            LogService.log('üîç [RoadRoutingService] Feature geometry —Ç–∏–ø: ${geometry.runtimeType}');

            // –Ø–∫—â–æ geometry —î encoded polyline string
            if (geometry is String) {
              LogService.log('üîç [RoadRoutingService] Feature geometry —î encoded polyline string, –¥–µ–∫–æ–¥—É—î–º–æ...');
              return _decodePolyline(geometry);
            }

            // –Ø–∫—â–æ geometry —î –æ–±'—î–∫—Ç–æ–º –∑ coordinates
            if (geometry is Map && geometry.containsKey('coordinates')) {
              final coordinates = geometry['coordinates'] as List;
              LogService.log('üîç [RoadRoutingService] –ó–Ω–∞–π–¥–µ–Ω–æ feature coordinates: ${coordinates.length} —Ç–æ—á–æ–∫');
              return coordinates.map((coord) => LatLng(coord[1], coord[0])).toList();
            }
          }
        }
      }

      LogService.log('‚ùå [RoadRoutingService] –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ GeoJSON');
      return [];
    } catch (e) {
      LogService.log('‚ùå [RoadRoutingService] –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É GeoJSON: $e');
      LogService.log('‚ùå [RoadRoutingService] –î–∞–Ω—ñ: $data');
      return [];
    }
  }

  /// –î–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è polyline string –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
  static List<LatLng> _decodePolyline(String polyline) {
    try {
      final List<LatLng> points = [];
      int index = 0;
      int lat = 0;
      int lng = 0;

      while (index < polyline.length) {
        int shift = 0;
        int result = 0;
        int b;
        do {
          b = polyline.codeUnitAt(index++) - 63;
          result |= (b & 0x1f) << shift;
          shift += 5;
        } while (b >= 0x20);
        int dlat = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));
        lat += dlat;

        shift = 0;
        result = 0;
        do {
          b = polyline.codeUnitAt(index++) - 63;
          result |= (b & 0x1f) << shift;
          shift += 5;
        } while (b >= 0x20);
        int dlng = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));
        lng += dlng;

        points.add(LatLng(lat / 1e5, lng / 1e5));
      }

      LogService.log('‚úÖ [RoadRoutingService] –î–µ–∫–æ–¥–æ–≤–∞–Ω–æ polyline: ${points.length} —Ç–æ—á–æ–∫');
      return points;
    } catch (e) {
      LogService.log('‚ùå [RoadRoutingService] –ü–æ–º–∏–ª–∫–∞ –¥–µ–∫–æ–¥—É–≤–∞–Ω–Ω—è polyline: $e');
      return [];
    }
  }

  /// Fallback: –ø—Ä—è–º–∞ –ª—ñ–Ω—ñ—è –º—ñ–∂ –¥–≤–æ–º–∞ —Ç–æ—á–∫–∞–º–∏
  static List<LatLng> _fallbackStraightLineRoute(LatLng start, LatLng end) {
    LogService.log('‚ö†Ô∏è [RoadRoutingService] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback: –ø—Ä—è–º–∞ –ª—ñ–Ω—ñ—è');
    return [start, end];
  }

  /// Fallback: –º–∞—Ä—à—Ä—É—Ç —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Ç–æ—á–æ–∫ (–ø—Ä—è–º—ñ –ª—ñ–Ω—ñ—ó)
  static List<LatLng> _fallbackMultiPointRoute(List<LatLng> waypoints) {
    LogService.log('‚ö†Ô∏è [RoadRoutingService] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback: –ø—Ä—è–º—ñ –ª—ñ–Ω—ñ—ó —á–µ—Ä–µ–∑ ${waypoints.length} —Ç–æ—á–æ–∫');
    return waypoints;
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –º–∞—Ä—à—Ä—É—Ç—É
  static double calculateRouteDistance(List<LatLng> coordinates) {
    if (coordinates.length < 2) return 0.0;

    double totalDistance = 0.0;
    for (int i = 1; i < coordinates.length; i++) {
      totalDistance += _calculateDistance(coordinates[i - 1], coordinates[i]);
    }
    return totalDistance;
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –º—ñ–∂ –¥–≤–æ–º–∞ —Ç–æ—á–∫–∞–º–∏ (Haversine formula)
  static double _calculateDistance(LatLng point1, LatLng point2) {
    const double earthRadius = 6371000; // –†–∞–¥—ñ—É—Å –ó–µ–º–ª—ñ –≤ –º–µ—Ç—Ä–∞—Ö

    final lat1Rad = point1.latitude * pi / 180;
    final lat2Rad = point2.latitude * pi / 180;
    final deltaLatRad = (point2.latitude - point1.latitude) * pi / 180;
    final deltaLonRad = (point2.longitude - point1.longitude) * pi / 180;

    final a = sin(deltaLatRad / 2) * sin(deltaLatRad / 2) + cos(lat1Rad) * cos(lat2Rad) * sin(deltaLonRad / 2) * sin(deltaLonRad / 2);
    final c = 2 * atan2(sqrt(a), sqrt(1 - a));

    return earthRadius * c;
  }

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó –∑–∞ —Ç–∏–ø–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
  /// 
  /// –ú–∞–ø–∏—Ç—å —Ç–∏–ø–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—ñ OpenRouteService:
  /// - cycling/bike -> cycling-regular
  /// - walking/hiking -> foot-walking  
  /// - driving/car -> driving-car
  /// - default -> cycling-regular
  /// 
  /// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤: —Ä—ñ–∑–Ω–∏—Ö –º—ñ—Å—Ü—è—Ö –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é –∑–∞ —Ç–∏–ø–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
  static String getProfileForActivity(String activityType) {
    switch (activityType.toLowerCase()) {
      case 'cycling':
      case 'bike':
        return 'cycling-regular';
      case 'walking':
      case 'hiking':
        return 'foot-walking';
      case 'driving':
      case 'car':
        return 'driving-car';
      default:
        return 'cycling-regular'; // –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤–µ–ª–æ—Å–∏–ø–µ–¥–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å
    }
  }

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è avoid_features –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ—Ñ—ñ–ª—é
  static List<String> _getAvoidFeaturesForProfile(String profile) {
    switch (profile) {
      case 'cycling-regular':
      case 'cycling-road':
      case 'cycling-mountain':
      case 'cycling-electric':
        return []; // –î–ª—è –≤–µ–ª–æ—Å–∏–ø–µ–¥—ñ–≤ –Ω–µ–º–∞—î –æ–±–º–µ–∂–µ–Ω—å - –º–æ–∂—É—Ç—å —ó—Ö–∞—Ç–∏ —Å–∫—Ä—ñ–∑—å
      case 'foot-walking':
      case 'foot-hiking':
        return ['ferries']; // –î–ª—è –ø—ñ—à–æ—Ö–æ–¥—ñ–≤ —Ç—ñ–ª—å–∫–∏ –ø–∞—Ä–æ–º–∏
      case 'driving-car':
      default:
        return ['highways', 'tollways', 'ferries']; // –î–ª—è –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ –≤—Å—ñ –æ–±–º–µ–∂–µ–Ω–Ω—è
    }
  }

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Ç–∞–π–ª –∫–∞—Ä—Ç–∏
  static MapTile _latLngToTile(double lat, double lng, int zoom) {
    final n = pow(2, zoom).toDouble();
    final x = ((lng + 180) / 360 * n).floor();
    final y = ((1 - log(tan(lat * pi / 180) + 1 / cos(lat * pi / 180)) / pi) / 2 * n).floor();
    return MapTile(x: x, y: y);
  }
}

/// –ö–ª–∞—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è —Ç–∞–π–ª—É –∫–∞—Ä—Ç–∏
class MapTile {
  final int x;
  final int y;

  MapTile({required this.x, required this.y});
}
