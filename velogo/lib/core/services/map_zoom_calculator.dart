import 'dart:math';
import 'package:flutter/material.dart';
import 'package:latlong2/latlong.dart';
import 'map_context_service.dart';
import 'map_zoom_config.dart';
import '../services/log_service.dart';

/// –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±—É –∫–∞—Ä—Ç–∏
class MapZoomCalculator {
  static const double _earthRadius = 6371000; // –†–∞–¥—ñ—É—Å –ó–µ–º–ª—ñ –≤ –º–µ—Ç—Ä–∞—Ö
  static const double _minZoom = 1.0;
  static const double _maxZoom = 20.0;

  /// –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –º–∞—Å—à—Ç–∞–± –¥–ª—è –∑–∞–¥–∞–Ω–∏—Ö —Ç–æ—á–æ–∫ —Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  static double calculateOptimalZoom({
    required List<LatLng> points,
    required MapContext context,
    required Size screenSize,
    double? currentZoom,
  }) {
    LogService.log('üßÆ [MapZoomCalculator] –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—à—Ç–∞–±—É: points=${points.length}, context=$context, screen=${screenSize.width}x${screenSize.height}');

    if (points.isEmpty) {
      final defaultZoom = _getDefaultZoomForContext(context);
      LogService.log('üìç [MapZoomCalculator] –ù–µ–º–∞—î —Ç–æ—á–æ–∫, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π zoom: $defaultZoom');
      return defaultZoom;
    }

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ bounding box
    final bounds = _calculateBounds(points);
    final distance = _calculateDistance(bounds);

    // –ê–¥–∞–ø—Ç–∞—Ü—ñ—è –ø—ñ–¥ —Ä–æ–∑–º—ñ—Ä –µ–∫—Ä–∞–Ω—É
    final screenFactor = _calculateScreenFactor(screenSize);

    // –§–æ—Ä–º—É–ª–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É zoom
    final optimalZoom = _calculateZoomFromDistance(distance, screenFactor);

    // –û–±–º–µ–∂–µ–Ω–Ω—è –≤ –º–µ–∂–∞—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    final clampedZoom = _clampZoom(optimalZoom, context);

    LogService.log('‚úÖ [MapZoomCalculator] –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π zoom: $optimalZoom -> –æ–±–º–µ–∂–µ–Ω–∏–π: $clampedZoom');

    return clampedZoom;
  }

  /// –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ü–µ–Ω—Ç—Ä –∫–∞—Ä—Ç–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏—Ö —Ç–æ—á–æ–∫
  static LatLng calculateCenter(List<LatLng> points) {
    if (points.isEmpty) {
      return LatLng(48.4131760, 35.0710294); // –î–Ω—ñ–ø—Ä–æ —è–∫ –¥–µ—Ñ–æ–ª—Ç
    }

    if (points.length == 1) {
      return points.first;
    }

    double totalLat = 0;
    double totalLng = 0;

    for (final point in points) {
      totalLat += point.latitude;
      totalLng += point.longitude;
    }

    return LatLng(
      totalLat / points.length,
      totalLng / points.length,
    );
  }

  /// –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ bounding box –¥–ª—è —Ç–æ—á–æ–∫
  static MapBounds _calculateBounds(List<LatLng> points) {
    if (points.isEmpty) {
      return MapBounds(
        north: 0,
        south: 0,
        east: 0,
        west: 0,
      );
    }

    double north = points.first.latitude;
    double south = points.first.latitude;
    double east = points.first.longitude;
    double west = points.first.longitude;

    for (final point in points) {
      north = max(north, point.latitude);
      south = min(south, point.latitude);
      east = max(east, point.longitude);
      west = min(west, point.longitude);
    }

    return MapBounds(
      north: north,
      south: south,
      east: east,
      west: west,
    );
  }

  /// –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ –≤—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ –∫—Ä–∞–π–Ω—ñ–º–∏ —Ç–æ—á–∫–∞–º–∏
  static double _calculateDistance(MapBounds bounds) {
    final lat1 = bounds.north;
    final lat2 = bounds.south;
    final lng1 = bounds.east;
    final lng2 = bounds.west;

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –ø–æ –¥—ñ–∞–≥–æ–Ω–∞–ª—ñ
    final latDistance = _calculateLatitudeDistance(lat1, lat2);
    final lngDistance = _calculateLongitudeDistance(lng1, lng2, (lat1 + lat2) / 2);

    return sqrt(pow(latDistance, 2) + pow(lngDistance, 2));
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –ø–æ —à–∏—Ä–æ—Ç—ñ
  static double _calculateLatitudeDistance(double lat1, double lat2) {
    return (lat1 - lat2) * pi / 180 * _earthRadius;
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –ø–æ –¥–æ–≤–≥–æ—Ç—ñ
  static double _calculateLongitudeDistance(double lng1, double lng2, double avgLat) {
    return (lng1 - lng2) * pi / 180 * _earthRadius * cos(avgLat * pi / 180);
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ñ–∞–∫—Ç–æ—Ä–∞ –µ–∫—Ä–∞–Ω—É
  static double _calculateScreenFactor(Size screenSize) {
    // –ë–∞–∑–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä –µ–∫—Ä–∞–Ω—É (iPhone 12 Pro)
    const baseWidth = 390.0;
    const baseHeight = 844.0;

    // –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç–∞ –º–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è
    final widthFactor = screenSize.width / baseWidth;
    final heightFactor = screenSize.height / baseHeight;

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è
    return (widthFactor + heightFactor) / 2;
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ zoom –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤—ñ–¥—Å—Ç–∞–Ω—ñ
  static double _calculateZoomFromDistance(double distance, double screenFactor) {
    if (distance <= 0) return 18.0; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π zoom –¥–ª—è –¥—É–∂–µ –º–∞–ª–∏—Ö –≤—ñ–¥—Å—Ç–∞–Ω–µ–π

    // –§–æ—Ä–º—É–ª–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É zoom –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤—ñ–¥—Å—Ç–∞–Ω—ñ
    // –ë–∞–∑–æ–≤–∏–π zoom –¥–ª—è –≤—ñ–¥—Å—Ç–∞–Ω—ñ 1000–º
    const baseDistance = 1000.0; // 1 –∫–º
    const baseZoom = 15.0;

    // –õ–æ–≥–∞—Ä–∏—Ñ–º—ñ—á–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫
    final zoom = baseZoom - log(distance / baseDistance) / ln2;

    // –ê–¥–∞–ø—Ç–∞—Ü—ñ—è –ø—ñ–¥ —Ä–æ–∑–º—ñ—Ä –µ–∫—Ä–∞–Ω—É
    final adjustedZoom = zoom + (screenFactor - 1.0) * 0.5;

    return adjustedZoom;
  }

  /// –û–±–º–µ–∂–∏—Ç–∏ zoom –≤ –º–µ–∂–∞—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  static double _clampZoom(double zoom, MapContext context) {
    final config = MapContextService.getConfig(context);
    return zoom.clamp(config.minZoom, config.maxZoom);
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π zoom –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  static double _getDefaultZoomForContext(MapContext context) {
    return MapContextService.getConfig(context).defaultZoom;
  }

  /// –†–æ–∑—Ä–∞—Ö—É–≤–∞—Ç–∏ zoom –¥–ª—è –ø–æ–∫–∞–∑—É –≤—Å—ñ—Ö —Ç–æ—á–æ–∫ –∑ –ø–µ–≤–Ω–∏–º –≤—ñ–¥—Å—Ç—É–ø–æ–º
  static double calculateZoomToFit({
    required List<LatLng> points,
    required Size screenSize,
    required MapContext context,
    double padding = 0.1, // 10% –≤—ñ–¥—Å—Ç—É–ø—É
  }) {
    if (points.isEmpty) {
      return _getDefaultZoomForContext(context);
    }

    final bounds = _calculateBounds(points);
    final distance = _calculateDistance(bounds);

    // –î–æ–¥–∞—î–º–æ –≤—ñ–¥—Å—Ç—É–ø
    final distanceWithPadding = distance * (1 + padding);

    // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ zoom
    final zoom = _calculateZoomFromDistance(distanceWithPadding, _calculateScreenFactor(screenSize));

    return _clampZoom(zoom, context);
  }

  /// –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –º–æ–∂–Ω–∞ –∑–±—ñ–ª—å—à–∏—Ç–∏ –º–∞—Å—à—Ç–∞–±
  static bool canZoomIn(MapContext context, double currentZoom) {
    final config = MapContextService.getConfig(context);
    return currentZoom < config.maxZoom;
  }

  /// –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –º–æ–∂–Ω–∞ –∑–º–µ–Ω—à–∏—Ç–∏ –º–∞—Å—à—Ç–∞–±
  static bool canZoomOut(MapContext context, double currentZoom) {
    final config = MapContextService.getConfig(context);
    return currentZoom > config.minZoom;
  }
}

/// –ú–æ–¥–µ–ª—å –¥–ª—è bounding box
class MapBounds {
  final double north;
  final double south;
  final double east;
  final double west;

  const MapBounds({
    required this.north,
    required this.south,
    required this.east,
    required this.west,
  });

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —à–∏—Ä–∏–Ω–∏ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
  double get width => east - west;

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–∏—Å–æ—Ç–∏ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
  double get height => north - south;

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ü–µ–Ω—Ç—Ä—É
  LatLng get center => LatLng(
        (north + south) / 2,
        (east + west) / 2,
      );

  @override
  String toString() {
    return 'MapBounds(north: $north, south: $south, east: $east, west: $west)';
  }
}
