import 'dart:math';
import 'package:latlong2/latlong.dart';
import 'road_routing_service.dart';
import '../services/log_service.dart';

/// –°–µ—Ä–≤—ñ—Å –¥–ª—è –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –∑ –ø—ñ–¥–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º –ø—ñ–¥ –Ω–∞–π–±–ª–∏–∂—á—ñ –¥–æ—Ä–æ–≥–∏
/// 
/// –û—Å–Ω–æ–≤–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:
/// - –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç–∞–Ω–æ–º –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è (—É–≤—ñ–º–∫–Ω–µ–Ω–æ/–≤–∏–º–∫–Ω–µ–Ω–æ)
/// - –ü–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ç–æ—á–æ–∫ –º–∞—Ä—à—Ä—É—Ç—É –∑ –ø—Ä–∏–ª–∏–ø–∞–Ω–Ω—è–º –¥–æ –¥–æ—Ä—ñ–≥
/// - –ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ –º–∞—Ä—à—Ä—É—Ç—ñ–≤ –ø—ñ—Å–ª—è –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
/// - –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
/// 
/// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤: CreateRouteScreen, SettingsCubit
class RouteDragService {
  static bool _isDragEnabled = false;
  static const double _snapDistance = 0.0001; // –í—ñ–¥—Å—Ç–∞–Ω—å –¥–ª—è "–ø—Ä–∏–ª–∏–ø–∞–Ω–Ω—è" –¥–æ –¥–æ—Ä–æ–≥–∏
  static const int _maxSnapAttempts = 3; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± –∑–Ω–∞–π—Ç–∏ –Ω–∞–π–±–ª–∏–∂—á—É –¥–æ—Ä–æ–≥—É

  /// –£–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏ —Ä–µ–∂–∏–º –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤
  /// 
  /// –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—Å—å–æ–≥–æ –¥–æ–¥–∞—Ç–∫—É
  /// 
  /// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤: SettingsCubit, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–æ–¥–∞—Ç–∫—É
  static void setDragEnabled(bool enabled) {
    _isDragEnabled = enabled;
    LogService.log('üîÑ [RouteDragService] –†–µ–∂–∏–º –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—ñ–≤: ${enabled ? "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" : "–≤–∏–º–∫–Ω–µ–Ω–æ"}');
  }

  /// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–æ —Ä–µ–∂–∏–º –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
  /// 
  /// –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
  /// 
  /// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤: CreateRouteScreen._handleLongPressOnRoute()
  static bool get isDragEnabled => _isDragEnabled;

  /// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  /// 
  /// –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î —Å—Ç–∞–Ω —Å–µ—Ä–≤—ñ—Å—É –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –∑ SettingsCubit
  /// 
  /// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤: SettingsCubit.loadSettings(), SettingsCubit.toggleRouteDragging()
  static void updateFromSettings(bool enabled) {
    _isDragEnabled = enabled;
    LogService.log('üîÑ [RouteDragService] –°—Ç–∞–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: ${enabled ? "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" : "–≤–∏–º–∫–Ω–µ–Ω–æ"}');
  }

  /// –ü–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç—É –∑ –ø—Ä–∏–ª–∏–ø–∞–Ω–Ω—è–º –¥–æ –Ω–∞–π–±–ª–∏–∂—á–æ—ó –¥–æ—Ä–æ–≥–∏
  /// 
  /// –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å:
  /// - –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–æ –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
  /// - –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–±–ª–∏–∂—á—É –¥–æ—Ä–æ–≥—É –¥–æ –Ω–æ–≤–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
  /// - –ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î –º–∞—Ä—à—Ä—É—Ç –∑ –Ω–æ–≤–æ—é —Ç–æ—á–∫–æ—é
  /// - –ü–æ–≤–µ—Ä—Ç–∞—î –æ–Ω–æ–≤–ª–µ–Ω—É —Ç–æ—á–∫—É
  /// 
  /// –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:
  /// - originalPoint: –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è —Ç–æ—á–∫–∏
  /// - newPosition: –Ω–æ–≤–∞ –ø–æ–∑–∏—Ü—ñ—è –ø—ñ—Å–ª—è –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
  /// - routePoints: –≤—Å—ñ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç—É
  /// - pointIndex: —ñ–Ω–¥–µ–∫—Å –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–æ—ó —Ç–æ—á–∫–∏
  /// - profile: –ø—Ä–æ—Ñ—ñ–ª—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—ó
  /// 
  /// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –≤: CreateRouteScreen (—á–µ—Ä–µ–∑ _moveRouteSection)
  static Future<LatLng> dragRoutePoint({
    required LatLng originalPoint,
    required LatLng newPosition,
    required List<LatLng> routePoints,
    required int pointIndex,
    String profile = 'cycling-regular',
  }) async {
    if (!_isDragEnabled) {
      LogService.log('‚ö†Ô∏è [RouteDragService] –†–µ–∂–∏–º –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ç–æ—á–∫—É');
      return originalPoint;
    }

    LogService.log('üîÑ [RouteDragService] –ü–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ç–æ—á–∫–∏ $pointIndex: ${originalPoint.latitude},${originalPoint.longitude} -> ${newPosition.latitude},${newPosition.longitude}');

    try {
      // –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ –Ω–∞–π–±–ª–∏–∂—á—É –¥–æ—Ä–æ–≥—É –¥–ª—è –Ω–æ–≤–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
      final snappedPoint = await _snapToNearestRoad(newPosition, profile);

      // –ü–µ—Ä–µ—Ä–∞—Ö—É—î–º–æ –º–∞—Ä—à—Ä—É—Ç –∑ –Ω–æ–≤–æ—é —Ç–æ—á–∫–æ—é
      final updatedRoute = await _recalculateRouteWithNewPoint(
        routePoints: routePoints,
        newPoint: snappedPoint,
        pointIndex: pointIndex,
        profile: profile,
      );

      if (updatedRoute.isNotEmpty) {
        LogService.log('‚úÖ [RouteDragService] –ú–∞—Ä—à—Ä—É—Ç —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ—Ä–∞—Ö—É–≤–∞–Ω–æ –∑ ${updatedRoute.length} —Ç–æ—á–∫–∞–º–∏');
        return snappedPoint;
      } else {
        LogService.log('‚ö†Ô∏è [RouteDragService] –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ—Ä–∞—Ö—É–≤–∞—Ç–∏ –º–∞—Ä—à—Ä—É—Ç, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é');
        return newPosition;
      }
    } catch (e) {
      LogService.log('‚ùå [RouteDragService] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—ñ: $e');
      return newPosition; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–æ–≤—É –ø–æ–∑–∏—Ü—ñ—é —è–∫ fallback
    }
  }

  /// –ó–Ω–∞–π—Ç–∏ –Ω–∞–π–±–ª–∏–∂—á—É –¥–æ—Ä–æ–≥—É –¥–ª—è —Ç–æ—á–∫–∏
  static Future<LatLng> _snapToNearestRoad(LatLng point, String profile) async {
    LogService.log('üîç [RouteDragService] –ü–æ—à—É–∫ –Ω–∞–π–±–ª–∏–∂—á–æ—ó –¥–æ—Ä–æ–≥–∏ –¥–ª—è —Ç–æ—á–∫–∏: ${point.latitude},${point.longitude}');

    // –°—Ç–≤–æ—Ä—é—î–º–æ –∫—ñ–ª—å–∫–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ç–æ—á–æ–∫ –Ω–∞–≤–∫–æ–ª–æ –ø–æ—Ç–æ—á–Ω–æ—ó –ø–æ–∑–∏—Ü—ñ—ó
    final testPoints = _generateTestPoints(point);

    for (int attempt = 0; attempt < _maxSnapAttempts; attempt++) {
      for (final testPoint in testPoints) {
        try {
          // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –º–æ–∂–Ω–∞ –¥—ñ—Å—Ç–∞—Ç–∏—Å—è –¥–æ —Ü—ñ—î—ó —Ç–æ—á–∫–∏ –ø–æ –¥–æ—Ä–æ–≥–∞—Ö
          final route = await RoadRoutingService.calculateRoute(
            startPoint: point,
            endPoint: testPoint,
            profile: profile,
          );

          if (route.isNotEmpty && route.length > 1) {
            // –Ø–∫—â–æ –º–∞—Ä—à—Ä—É—Ç —ñ—Å–Ω—É—î, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤—É —Ç–æ—á–∫—É
            LogService.log('‚úÖ [RouteDragService] –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–∞–π–±–ª–∏–∂—á—É –¥–æ—Ä–æ–≥—É: ${testPoint.latitude},${testPoint.longitude}');
            return testPoint;
          }
        } catch (e) {
          LogService.log('‚ö†Ô∏è [RouteDragService] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —Ç–æ—á–∫–∏ ${testPoint.latitude},${testPoint.longitude}: $e');
        }
      }

      // –ó–±—ñ–ª—å—à—É—î–º–æ —Ä–∞–¥—ñ—É—Å –ø–æ—à—É–∫—É –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ—ó —Å–ø—Ä–æ–±–∏
      final newTestPoints = _generateTestPoints(point, radius: _snapDistance * (attempt + 2));
      testPoints.addAll(newTestPoints);
    }

    LogService.log('‚ö†Ô∏è [RouteDragService] –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞–π–±–ª–∏–∂—á—É –¥–æ—Ä–æ–≥—É, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω—É —Ç–æ—á–∫—É');
    return point;
  }

  /// –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ —Ç–æ—á–∫–∏ –Ω–∞–≤–∫–æ–ª–æ –∑–∞–¥–∞–Ω–æ—ó —Ç–æ—á–∫–∏
  static List<LatLng> _generateTestPoints(LatLng center, {double radius = _snapDistance}) {
    final points = <LatLng>[];

    // –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–æ—á–∫–∏ –ø–æ –∫–æ–ª—É
    for (int i = 0; i < 8; i++) {
      final angle = (i * 2 * pi) / 8;
      final lat = center.latitude + radius * cos(angle);
      final lng = center.longitude + radius * sin(angle);
      points.add(LatLng(lat, lng));
    }

    // –î–æ–¥–∞—î–º–æ —Ç–æ—á–∫–∏ –ø–æ –¥—ñ–∞–≥–æ–Ω–∞–ª—è—Ö
    points.add(LatLng(center.latitude + radius, center.longitude + radius));
    points.add(LatLng(center.latitude + radius, center.longitude - radius));
    points.add(LatLng(center.latitude - radius, center.longitude + radius));
    points.add(LatLng(center.latitude - radius, center.longitude - radius));

    return points;
  }

  /// –ü–µ—Ä–µ—Ä–∞—Ö—É–≤–∞—Ç–∏ –º–∞—Ä—à—Ä—É—Ç –∑ –Ω–æ–≤–æ—é —Ç–æ—á–∫–æ—é
  static Future<List<LatLng>> _recalculateRouteWithNewPoint({
    required List<LatLng> routePoints,
    required LatLng newPoint,
    required int pointIndex,
    required String profile,
  }) async {
    LogService.log('üîÑ [RouteRoutingService] –ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ –º–∞—Ä—à—Ä—É—Ç—É –∑ –Ω–æ–≤–æ—é —Ç–æ—á–∫–æ—é $pointIndex');

    // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π —Å–ø–∏—Å–æ–∫ —Ç–æ—á–æ–∫ –∑ –∑–∞–º—ñ–Ω–µ–Ω–æ—é —Ç–æ—á–∫–æ—é
    final updatedPoints = List<LatLng>.from(routePoints);
    updatedPoints[pointIndex] = newPoint;

    // –Ø–∫—â–æ —Ü–µ –ø–µ—Ä—à–∞ –∞–±–æ –æ—Å—Ç–∞–Ω–Ω—è —Ç–æ—á–∫–∞, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–µ—Å—å –º–∞—Ä—à—Ä—É—Ç
    if (pointIndex == 0 || pointIndex == routePoints.length - 1) {
      return await RoadRoutingService.calculateRouteWithWaypoints(
        waypoints: updatedPoints,
        profile: profile,
      );
    }

    // –î–ª—è –ø—Ä–æ–º—ñ–∂–Ω–∏—Ö —Ç–æ—á–æ–∫ –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–µ–≥–º–µ–Ω—Ç–∏
    final segments = <List<LatLng>>[];

    // –°–µ–≥–º–µ–Ω—Ç –¥–æ –Ω–æ–≤–æ—ó —Ç–æ—á–∫–∏
    if (pointIndex > 0) {
      final segment1 = await RoadRoutingService.calculateRouteWithWaypoints(
        waypoints: updatedPoints.sublist(0, pointIndex + 1),
        profile: profile,
      );
      if (segment1.isNotEmpty) segments.add(segment1);
    }

    // –°–µ–≥–º–µ–Ω—Ç –ø—ñ—Å–ª—è –Ω–æ–≤–æ—ó —Ç–æ—á–∫–∏
    if (pointIndex < routePoints.length - 1) {
      final segment2 = await RoadRoutingService.calculateRouteWithWaypoints(
        waypoints: updatedPoints.sublist(pointIndex),
        profile: profile,
      );
      if (segment2.isNotEmpty) segments.add(segment2);
    }

    // –û–±'—î–¥–Ω—É—î–º–æ —Å–µ–≥–º–µ–Ω—Ç–∏
    final combinedRoute = <LatLng>[];
    for (final segment in segments) {
      if (combinedRoute.isEmpty) {
        combinedRoute.addAll(segment);
      } else {
        // –î–æ–¥–∞—î–º–æ —Å–µ–≥–º–µ–Ω—Ç –±–µ–∑ –ø–µ—Ä—à–æ—ó —Ç–æ—á–∫–∏ (—â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—é–≤–∞–Ω–Ω—è)
        combinedRoute.addAll(segment.skip(1));
      }
    }

    return combinedRoute;
  }

  /// –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ—Ç—è–≥–Ω—É—Ç–∏ —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç—É
  static bool canDragPoint(List<LatLng> routePoints, int pointIndex) {
    if (!_isDragEnabled) return false;
    if (routePoints.isEmpty) return false;
    if (pointIndex < 0 || pointIndex >= routePoints.length) return false;

    // –ù–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞—Ç–∏ –ø–µ—Ä—à—É —Ç–∞ –æ—Å—Ç–∞–Ω–Ω—é —Ç–æ—á–∫–∏ (—è–∫—â–æ –º–∞—Ä—à—Ä—É—Ç –º–∞—î –º–µ–Ω—à–µ 3 —Ç–æ—á–æ–∫)
    if (routePoints.length <= 2) return false;

    return true;
  }

  /// –û—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–µ–∂–∏–º –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
  static Map<String, dynamic> getDragInfo() {
    return {
      'enabled': _isDragEnabled,
      'snapDistance': _snapDistance,
      'maxSnapAttempts': _maxSnapAttempts,
    };
  }
}
