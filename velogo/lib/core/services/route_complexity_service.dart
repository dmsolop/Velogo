import 'package:dartz/dartz.dart';
import '../error/failures.dart';
import 'health_metrics.dart';
import 'personalization_engine.dart';
import 'health_integration_service.dart';
import '../../features/profile/domain/entities/profile_entity.dart';
import '../../features/weather/data/models/weather_data.dart';
import '../../features/map/domain/entities/route_entity.dart';
import '../services/log_service.dart';

/// –û—Å–Ω–æ–≤–Ω–∏–π —Å–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –º–∞—Ä—à—Ä—É—Ç—É –∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—î—é
class RouteComplexityService {
  static final RouteComplexityService _instance = RouteComplexityService._internal();
  factory RouteComplexityService() => _instance;
  RouteComplexityService._internal();

  final PersonalizationEngine _personalizationEngine = PersonalizationEngine();
  final HealthIntegrationService _healthIntegrationService = HealthIntegrationServiceFactory.create();

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –º–∞—Ä—à—Ä—É—Ç—É –∑ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—î—é
  Future<Either<Failure, PersonalizedDifficultyResult>> calculateRouteComplexity({
    required RouteEntity route,
    required ProfileEntity userProfile,
    DateTime? startTime,
    bool useHealthData = true,
  }) async {
    try {
      LogService.log('üéØ [RouteComplexityService] –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –º–∞—Ä—à—Ä—É—Ç—É: ${route.name}');
      LogService.log('üë§ [RouteComplexityService] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${userProfile.name} (${userProfile.fitnessLevel})');

      // 1. –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –±–∞–∑–æ–≤—É —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç—É
      final baseDifficulty = _calculateBaseRouteDifficulty(route);

      // 2. –û—Ç—Ä–∏–º—É—î–º–æ health-–º–µ—Ç—Ä–∏–∫–∏ (—è–∫—â–æ –¥–æ–∑–≤–æ–ª–µ–Ω–æ)
      HealthMetrics? healthMetrics;
      if (useHealthData && userProfile.healthDataIntegration) {
        final healthResult = await _healthIntegrationService.getCurrentHealthMetrics();
        healthResult.fold(
          (failure) => LogService.log('‚ö†Ô∏è [RouteComplexityService] –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ health-–¥–∞–Ω—ñ: $failure'),
          (metrics) => healthMetrics = metrics,
        );
      }

      // 3. –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—É —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å
      final personalizedResult = _personalizationEngine.calculatePersonalizedDifficulty(
        baseDifficulty: baseDifficulty,
        profile: userProfile,
        healthMetrics: healthMetrics,
      );

      LogService.log('‚úÖ [RouteComplexityService] –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${personalizedResult.personalizedDifficulty}');

      return Right(personalizedResult);
    } catch (e) {
      LogService.log('‚ùå [RouteComplexityService] –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É: $e');
      return Left(ServerFailure('Failed to calculate route complexity: $e'));
    }
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Å–µ–∫—Ü—ñ—ó –º–∞—Ä—à—Ä—É—Ç—É
  Future<Either<Failure, PersonalizedDifficultyResult>> calculateSectionComplexity({
    required RouteSectionEntity section,
    required ProfileEntity userProfile,
    WeatherData? weatherData,
    HealthMetrics? healthMetrics,
  }) async {
    try {
      LogService.log('üìç [RouteComplexityService] –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ —Å–µ–∫—Ü—ñ—ó: ${section.id}');

      // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –±–∞–∑–æ–≤—É —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å —Å–µ–∫—Ü—ñ—ó
      final baseDifficulty = _calculateBaseSectionDifficulty(section, weatherData);

      // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—É —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å
      final personalizedResult = _personalizationEngine.calculatePersonalizedDifficulty(
        baseDifficulty: baseDifficulty,
        profile: userProfile,
        healthMetrics: healthMetrics,
      );

      return Right(personalizedResult);
    } catch (e) {
      LogService.log('‚ùå [RouteComplexityService] –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Å–µ–∫—Ü—ñ—ó: $e');
      return Left(ServerFailure('Failed to calculate section complexity: $e'));
    }
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ –ø—ñ–¥ —á–∞—Å –ø–æ—ó–∑–¥–∫–∏
  Future<Either<Failure, PersonalizedDifficultyResult>> calculateRealTimeComplexity({
    required RouteEntity route,
    required ProfileEntity userProfile,
    required int currentSectionIndex,
    WeatherData? currentWeather,
    HealthMetrics? currentHealthMetrics,
  }) async {
    try {
      LogService.log('‚è±Ô∏è [RouteComplexityService] –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ');

      if (currentSectionIndex >= route.sections.length) {
        return Left(ServerFailure('Invalid section index: $currentSectionIndex'));
      }

      final currentSection = route.sections[currentSectionIndex];

      // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –ø–æ—Ç–æ—á–Ω–æ—ó —Å–µ–∫—Ü—ñ—ó
      final sectionResult = await calculateSectionComplexity(
        section: currentSection,
        userProfile: userProfile,
        weatherData: currentWeather,
        healthMetrics: currentHealthMetrics,
      );

      return sectionResult;
    } catch (e) {
      LogService.log('‚ùå [RouteComplexityService] –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ: $e');
      return Left(ServerFailure('Failed to calculate real-time complexity: $e'));
    }
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –±–∞–∑–æ–≤–æ—ó —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –º–∞—Ä—à—Ä—É—Ç—É
  double _calculateBaseRouteDifficulty(RouteEntity route) {
    double totalDifficulty = 0.0;

    for (final section in route.sections) {
      totalDifficulty += section.difficulty;
    }

    // –°–µ—Ä–µ–¥–Ω—è —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç—É
    final averageDifficulty = totalDifficulty / route.sections.length;

    // –ö–æ—Ä–µ–∫—Ü—ñ—è –Ω–∞ –∑–∞–≥–∞–ª—å–Ω—É –≤—ñ–¥—Å—Ç–∞–Ω—å —Ç–∞ –ø—ñ–¥–π–æ–º
    final distanceFactor = _calculateDistanceFactor(route.totalDistance);
    final elevationFactor = _calculateElevationFactor(route.totalElevationGain);

    return averageDifficulty * distanceFactor * elevationFactor;
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –±–∞–∑–æ–≤–æ—ó —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ —Å–µ–∫—Ü—ñ—ó
  double _calculateBaseSectionDifficulty(RouteSectionEntity section, WeatherData? weather) {
    double difficulty = section.difficulty;

    // –ö–æ—Ä–µ–∫—Ü—ñ—è –Ω–∞ –ø–æ–≥–æ–¥—É
    if (weather != null) {
      difficulty *= _calculateWeatherFactor(weather);
    }

    // –ö–æ—Ä–µ–∫—Ü—ñ—è –Ω–∞ –ø–æ–∫—Ä–∏—Ç—Ç—è
    difficulty *= _calculateSurfaceFactor(section.surfaceType);

    return difficulty;
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ñ–∞–∫—Ç–æ—Ä—ñ–≤ –ø–æ–≥–æ–¥–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
  List<DifficultyFactor> _calculateWeatherFactors(WeatherData weather) {
    final factors = <DifficultyFactor>[];

    // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    if (weather.temperature < 5.0) {
      factors.add(DifficultyFactor(
        name: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
        description: '–•–æ–ª–æ–¥–Ω–∞ –ø–æ–≥–æ–¥–∞ - –∑–Ω–∏–∂–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å',
        impact: 0.1,
        category: 'weather',
        isPositive: false,
      ));
    } else if (weather.temperature > 30.0) {
      factors.add(DifficultyFactor(
        name: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
        description: '–°–ø–µ–∫–æ—Ç–Ω–∞ –ø–æ–≥–æ–¥–∞ - –∑–Ω–∏–∂–µ–Ω–∞ –≤–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å',
        impact: 0.15,
        category: 'weather',
        isPositive: false,
      ));
    }

    // –í—ñ—Ç–µ—Ä
    if (weather.windSpeed > 15) {
      factors.add(DifficultyFactor(
        name: '–í—ñ—Ç–µ—Ä',
        description: '–°–∏–ª—å–Ω–∏–π –≤—ñ—Ç–µ—Ä - –∑–Ω–∏–∂–µ–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å',
        impact: 0.2,
        category: 'weather',
        isPositive: false,
      ));
    } else if (weather.windSpeed > 10) {
      factors.add(DifficultyFactor(
        name: '–í—ñ—Ç–µ—Ä',
        description: '–ü–æ–º—ñ—Ä–Ω–∏–π –≤—ñ—Ç–µ—Ä - –Ω–µ–∑–Ω–∞—á–Ω–∏–π –≤–ø–ª–∏–≤',
        impact: 0.1,
        category: 'weather',
        isPositive: false,
      ));
    }

    // –û–ø–∞–¥–∏
    if (weather.precipitation > 5) {
      factors.add(DifficultyFactor(
        name: '–û–ø–∞–¥–∏',
        description: '–î–æ—â - –∑–Ω–∏–∂–µ–Ω–∞ –±–µ–∑–ø–µ–∫–∞ —Ç–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å',
        impact: 0.3,
        category: 'weather',
        isPositive: false,
      ));
    } else if (weather.precipitation > 0) {
      factors.add(DifficultyFactor(
        name: '–û–ø–∞–¥–∏',
        description: '–õ–µ–≥–∫—ñ –æ–ø–∞–¥–∏ - –Ω–µ–∑–Ω–∞—á–Ω–∏–π –≤–ø–ª–∏–≤',
        impact: 0.1,
        category: 'weather',
        isPositive: false,
      ));
    }

    // –í–∏–¥–∏–º—ñ—Å—Ç—å
    if (weather.visibility < 5.0) {
      factors.add(DifficultyFactor(
        name: '–í–∏–¥–∏–º—ñ—Å—Ç—å',
        description: '–ü–æ–≥–∞–Ω–∞ –≤–∏–¥–∏–º—ñ—Å—Ç—å - –∑–Ω–∏–∂–µ–Ω–∞ –±–µ–∑–ø–µ–∫–∞',
        impact: 0.1,
        category: 'weather',
        isPositive: false,
      ));
    }

    return factors;
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ñ–∞–∫—Ç–æ—Ä—ñ–≤ –ø–æ–∫—Ä–∏—Ç—Ç—è –¥–æ—Ä–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
  List<DifficultyFactor> _calculateSurfaceFactors(RoadSurfaceType surfaceType) {
    final factors = <DifficultyFactor>[];

    switch (surfaceType) {
      case RoadSurfaceType.gravel:
        factors.add(DifficultyFactor(
          name: '–ü–æ–∫—Ä–∏—Ç—Ç—è',
          description: '–ì—Ä–∞–≤—ñ–π - –∑–Ω–∏–∂–µ–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å',
          impact: 0.2,
          category: 'surface',
          isPositive: false,
        ));
        break;
      case RoadSurfaceType.dirt:
        factors.add(DifficultyFactor(
          name: '–ü–æ–∫—Ä–∏—Ç—Ç—è',
          description: '“ê—Ä—É–Ω—Ç - –∑–Ω–∞—á–Ω–æ –∑–Ω–∏–∂–µ–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å',
          impact: 0.4,
          category: 'surface',
          isPositive: false,
        ));
        break;
      case RoadSurfaceType.cobblestone:
        factors.add(DifficultyFactor(
          name: '–ü–æ–∫—Ä–∏—Ç—Ç—è',
          description: '–ë—Ä—É–∫—ñ–≤–∫–∞ - –≤–∏—Å–æ–∫–∞ –≤—ñ–±—Ä–∞—Ü—ñ—è',
          impact: 0.3,
          category: 'surface',
          isPositive: false,
        ));
        break;
      case RoadSurfaceType.grass:
        factors.add(DifficultyFactor(
          name: '–ü–æ–∫—Ä–∏—Ç—Ç—è',
          description: '–¢—Ä–∞–≤–∞ - –¥—É–∂–µ –≤–∞–∂–∫–æ',
          impact: 0.5,
          category: 'surface',
          isPositive: false,
        ));
        break;
      case RoadSurfaceType.sand:
        factors.add(DifficultyFactor(
          name: '–ü–æ–∫—Ä–∏—Ç—Ç—è',
          description: '–ü—ñ—Å–æ–∫ - –µ–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –≤–∞–∂–∫–æ',
          impact: 0.8,
          category: 'surface',
          isPositive: false,
        ));
        break;
      default:
        // –ê—Å—Ñ–∞–ª—å—Ç, –±–µ—Ç–æ–Ω - –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –≤–ø–ª–∏–≤—É
        break;
    }

    return factors;
  }

  /// –§–∞–∫—Ç–æ—Ä –≤—ñ–¥—Å—Ç–∞–Ω—ñ
  double _calculateDistanceFactor(double distance) {
    if (distance < 10) return 1.0; // –ö–æ—Ä–æ—Ç–∫—ñ –º–∞—Ä—à—Ä—É—Ç–∏
    if (distance < 25) return 1.1; // –°–µ—Ä–µ–¥–Ω—ñ –º–∞—Ä—à—Ä—É—Ç–∏
    if (distance < 50) return 1.2; // –î–æ–≤–≥—ñ –º–∞—Ä—à—Ä—É—Ç–∏
    return 1.3; // –î—É–∂–µ –¥–æ–≤–≥—ñ –º–∞—Ä—à—Ä—É—Ç–∏
  }

  /// –§–∞–∫—Ç–æ—Ä –ø—ñ–¥–π–æ–º—É
  double _calculateElevationFactor(double elevationGain) {
    if (elevationGain < 100) return 1.0; // –†—ñ–≤–Ω–∏–Ω–Ω–∏–π
    if (elevationGain < 300) return 1.1; // –ü–æ–º—ñ—Ä–Ω–∏–π –ø—ñ–¥–π–æ–º
    if (elevationGain < 600) return 1.2; // –ö—Ä—É—Ç–∏–π –ø—ñ–¥–π–æ–º
    if (elevationGain < 1000) return 1.3; // –î—É–∂–µ –∫—Ä—É—Ç–∏–π –ø—ñ–¥–π–æ–º
    return 1.4; // –ï–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∏–π –ø—ñ–¥–π–æ–º
  }

  /// –§–∞–∫—Ç–æ—Ä –ø–æ–≥–æ–¥–∏
  double _calculateWeatherFactor(WeatherData weather) {
    double factor = 1.0;

    // –í–ø–ª–∏–≤ –≤—ñ—Ç—Ä—É
    if (weather.windSpeed > 15) {
      factor += 0.2; // –°–∏–ª—å–Ω–∏–π –≤—ñ—Ç–µ—Ä
    } else if (weather.windSpeed > 10) {
      factor += 0.1; // –ü–æ–º—ñ—Ä–Ω–∏–π –≤—ñ—Ç–µ—Ä
    }

    // –í–ø–ª–∏–≤ –æ–ø–∞–¥—ñ–≤
    if (weather.precipitation > 5) {
      factor += 0.3; // –î–æ—â
    } else if (weather.precipitation > 0) {
      factor += 0.1; // –õ–µ–≥–∫—ñ –æ–ø–∞–¥–∏
    }

    // –í–ø–ª–∏–≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏
    if (weather.temperature < 0 || weather.temperature > 35) {
      factor += 0.2; // –ï–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    }

    return factor;
  }

  /// –§–∞–∫—Ç–æ—Ä –ø–æ–∫—Ä–∏—Ç—Ç—è –¥–æ—Ä–æ–≥–∏
  double _calculateSurfaceFactor(RoadSurfaceType surfaceType) {
    switch (surfaceType) {
      case RoadSurfaceType.asphalt:
        return 1.0; // –û–ø—Ç–∏–º–∞–ª—å–Ω–µ –ø–æ–∫—Ä–∏—Ç—Ç—è
      case RoadSurfaceType.concrete:
        return 1.05; // –¢—Ä–æ—Ö–∏ –≥—ñ—Ä—à–µ
      case RoadSurfaceType.gravel:
        return 1.2; // –ü–æ–º—ñ—Ä–Ω–æ –≥—ñ—Ä—à–µ
      case RoadSurfaceType.dirt:
        return 1.4; // –ó–Ω–∞—á–Ω–æ –≥—ñ—Ä—à–µ
      case RoadSurfaceType.cobblestone:
        return 1.3; // –í–∏—Å–æ–∫–∞ –≤—ñ–±—Ä–∞—Ü—ñ—è
      case RoadSurfaceType.grass:
        return 1.5; // –î—É–∂–µ –≤–∞–∂–∫–æ
      case RoadSurfaceType.sand:
        return 1.8; // –ï–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ –≤–∞–∂–∫–æ
    }
  }

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
  List<String> getRecommendations(PersonalizedDifficultyResult result) {
    final recommendations = <String>[];

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä—ñ–≤–Ω—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
    switch (result.difficultyLevel) {
      case '–õ–µ–≥–∫–∏–π':
        recommendations.add('–Ü–¥–µ–∞–ª—å–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—ñ–≤');
        recommendations.add('–ú–æ–∂–Ω–∞ –≤–∑—è—Ç–∏ –∑ —Å–æ–±–æ—é –¥—ñ—Ç–µ–π');
        break;
      case '–ü–æ–º—ñ—Ä–Ω–∏–π':
        recommendations.add('–ü—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏—Ö –≤–µ–ª–æ—Å–∏–ø–µ–¥–∏—Å—Ç—ñ–≤');
        recommendations.add('–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–∑—è—Ç–∏ –≤–æ–¥—É —Ç–∞ –ø–µ—Ä–µ–∫—É—Å');
        break;
      case '–°–∫–ª–∞–¥–Ω–∏–π':
        recommendations.add('–ü–æ—Ç—Ä–µ–±—É—î –¥–æ—Å–≤—ñ–¥—É —Ç–∞ –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏');
        recommendations.add('–û–±–æ–≤\'—è–∑–∫–æ–≤–æ –≤–∑—è—Ç–∏ –≤–æ–¥—É, —ó–∂—É —Ç–∞ —Ä–µ–º–æ–Ω—Ç–Ω–∏–π –Ω–∞–±—ñ—Ä');
        break;
      case '–î—É–∂–µ —Å–∫–ª–∞–¥–Ω–∏–π':
        recommendations.add('–¢—ñ–ª—å–∫–∏ –¥–ª—è –µ–∫—Å–ø–µ—Ä—Ç—ñ–≤');
        recommendations.add('–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è —ó—Ö–∞—Ç–∏ –≤ –≥—Ä—É–ø—ñ');
        recommendations.add('–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ–≥–æ–¥—É –ø–µ—Ä–µ–¥ –≤–∏—ó–∑–¥–æ–º');
        break;
      case '–ï–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∏–π':
        recommendations.add('–ù–µ–±–µ–∑–ø–µ—á–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç');
        recommendations.add('–û–±–æ–≤\'—è–∑–∫–æ–≤–æ –≤ –≥—Ä—É–ø—ñ –∑ –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–º –≥—ñ–¥–æ–º');
        recommendations.add('–ü–æ–≤–Ω–∞ –µ–∫—ñ–ø—ñ—Ä–æ–≤–∫–∞ —Ç–∞ –∑–∞–ø–∞—Å–Ω—ñ —á–∞—Å—Ç–∏–Ω–∏');
        break;
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ñ–∞–∫—Ç–æ—Ä—ñ–≤
    for (final factor in result.factors) {
      if (factor.impact > 0.1) {
        switch (factor.category) {
          case 'health':
            recommendations.add('–£–≤–∞–∂–Ω–æ —Å—Ç–µ–∂—Ç–µ –∑–∞ –ø–æ–∫–∞–∑–Ω–∏–∫–∞–º–∏ –∑–¥–æ—Ä–æ–≤\'—è');
            break;
          case 'weather':
            recommendations.add('–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏');
            break;
          case 'surface':
            recommendations.add('–ü—ñ–¥–≥–æ—Ç—É–π—Ç–µ –≤–µ–ª–æ—Å–∏–ø–µ–¥ –¥–æ —Ç–∏–ø—É –ø–æ–∫—Ä–∏—Ç—Ç—è');
            break;
        }
      }
    }

    return recommendations;
  }

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–∏—Ö —Ñ–∞–∫—Ç–æ—Ä—ñ–≤ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –¥–ª—è —Å–µ–∫—Ü—ñ—ó
  List<DifficultyFactor> getDetailedComplexityFactors({
    required RouteSectionEntity section,
    WeatherData? weatherData,
  }) {
    final factors = <DifficultyFactor>[];

    // –§–∞–∫—Ç–æ—Ä–∏ –ø–æ–≥–æ–¥–∏
    if (weatherData != null) {
      factors.addAll(_calculateWeatherFactors(weatherData));
    }

    // –§–∞–∫—Ç–æ—Ä–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è
    factors.addAll(_calculateSurfaceFactors(section.surfaceType));

    // –§–∞–∫—Ç–æ—Ä–∏ –ø—ñ–¥–π–æ–º—É
    if (section.elevationGain > 50) {
      factors.add(DifficultyFactor(
        name: '–ü—ñ–¥–π–æ–º',
        description: '–ü—ñ–¥–π–æ–º ${section.elevationGain.toStringAsFixed(0)}–º - –∑–±—ñ–ª—å—à–µ–Ω–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å',
        impact: (section.elevationGain / 100) * 0.1,
        category: 'elevation',
        isPositive: false,
      ));
    }

    return factors;
  }

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
  Map<String, dynamic> getComplexityStats(PersonalizedDifficultyResult result) {
    return {
      'baseDifficulty': result.baseDifficulty,
      'personalizedDifficulty': result.personalizedDifficulty,
      'personalizationFactor': result.personalizationFactor,
      'difficultyLevel': result.difficultyLevel,
      'factorsCount': result.factors.length,
      'positiveFactors': result.factors.where((f) => f.isPositive).length,
      'negativeFactors': result.factors.where((f) => !f.isPositive).length,
      'calculatedAt': result.calculatedAt?.toIso8601String(),
    };
  }
}
