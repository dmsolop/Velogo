import 'dart:math';
import 'health_metrics.dart';
import '../../features/profile/domain/entities/profile_entity.dart';
import '../../features/weather/data/models/weather_data.dart';
import '../../features/map/data/models/road_surface.dart';
import '../services/log_service.dart';

/// –î–≤–∏–≥—É–Ω –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—ó –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ—ó —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –º–∞—Ä—à—Ä—É—Ç—É
class PersonalizationEngine {
  static final PersonalizationEngine _instance = PersonalizationEngine._internal();
  factory PersonalizationEngine() => _instance;
  PersonalizationEngine._internal();

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ—ó —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø—Ä–æ—Ñ—ñ–ª—é —Ç–∞ health-–º–µ—Ç—Ä–∏–∫
  PersonalizedDifficultyResult calculatePersonalizedDifficulty({
    required double baseDifficulty,
    required ProfileEntity profile,
    HealthMetrics? healthMetrics,
    WeatherData? currentWeather,
    RoadSurface? currentSurface,
  }) {
    try {
      LogService.log('üéØ [PersonalizationEngine] –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ—ó —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ');
      LogService.log('üìä [PersonalizationEngine] –ë–∞–∑–æ–≤–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å: $baseDifficulty');
      LogService.log('üë§ [PersonalizationEngine] –ü—Ä–æ—Ñ—ñ–ª—å: ${profile.fitnessLevel}, –≤—ñ–∫: ${profile.age}');

      final factors = <DifficultyFactor>[];
      double personalizationFactor = 1.0;

      // 1. –§–∞–∫—Ç–æ—Ä–∏ –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      final profileFactors = _calculateProfileFactors(profile);
      factors.addAll(profileFactors);
      personalizationFactor *= _getProfileMultiplier(profileFactors);

      // 2. –§–∞–∫—Ç–æ—Ä–∏ health-–º–µ—Ç—Ä–∏–∫
      if (healthMetrics != null) {
        final healthFactors = _calculateHealthFactors(healthMetrics);
        factors.addAll(healthFactors);
        personalizationFactor *= _getHealthMultiplier(healthFactors);
      }

      // 3. –§–∞–∫—Ç–æ—Ä–∏ –ø–æ—Ç–æ—á–Ω–æ—ó –ø–æ–≥–æ–¥–∏
      if (currentWeather != null) {
        final weatherFactors = _calculateWeatherFactors(currentWeather);
        factors.addAll(weatherFactors);
        personalizationFactor *= _getWeatherMultiplier(weatherFactors);
      }

      // 4. –§–∞–∫—Ç–æ—Ä–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è –¥–æ—Ä–æ–≥–∏
      if (currentSurface != null) {
        final surfaceFactors = _calculateSurfaceFactors(currentSurface);
        factors.addAll(surfaceFactors);
        personalizationFactor *= _getSurfaceMultiplier(surfaceFactors);
      }

      final personalizedDifficulty = baseDifficulty * personalizationFactor;
      final difficultyLevel = _getDifficultyLevel(personalizedDifficulty);
      final difficultyColor = difficultyLevel.color;

      LogService.log('‚úÖ [PersonalizationEngine] –†–µ–∑—É–ª—å—Ç–∞—Ç: $personalizedDifficulty (—Ñ–∞–∫—Ç–æ—Ä: $personalizationFactor)');

      return PersonalizedDifficultyResult(
        baseDifficulty: baseDifficulty,
        personalizedDifficulty: personalizedDifficulty,
        personalizationFactor: personalizationFactor,
        factors: factors,
        difficultyLevel: difficultyLevel.displayName,
        difficultyColor: difficultyColor,
        calculatedAt: DateTime.now(),
      );
    } catch (e) {
      LogService.log('‚ùå [PersonalizationEngine] –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É: $e');
      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –±–∞–∑–æ–≤—É —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
      return PersonalizedDifficultyResult(
        baseDifficulty: baseDifficulty,
        personalizedDifficulty: baseDifficulty,
        personalizationFactor: 1.0,
        factors: [],
        difficultyLevel: _getDifficultyLevel(baseDifficulty).displayName,
        difficultyColor: _getDifficultyLevel(baseDifficulty).color,
        calculatedAt: DateTime.now(),
      );
    }
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ñ–∞–∫—Ç–æ—Ä—ñ–≤ –ø—Ä–æ—Ñ—ñ–ª—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  List<DifficultyFactor> _calculateProfileFactors(ProfileEntity profile) {
    final factors = <DifficultyFactor>[];

    // –í—ñ–∫
    if (profile.age > 0) {
      if (profile.age > 50) {
        factors.add(DifficultyFactor(
          name: '–í—ñ–∫',
          description: '–í—ñ–∫ –ø–æ–Ω–∞–¥ 50 —Ä–æ–∫—ñ–≤ –∑–º–µ–Ω—à—É—î –≤–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å',
          impact: 0.2,
          category: 'age',
          isPositive: false,
        ));
      } else if (profile.age < 25) {
        factors.add(DifficultyFactor(
          name: '–í—ñ–∫',
          description: '–ú–æ–ª–æ–¥–∏–π –≤—ñ–∫ –ø—ñ–¥–≤–∏—â—É—î –≤–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å',
          impact: -0.1,
          category: 'age',
          isPositive: true,
        ));
      }
    }

    // –†—ñ–≤–µ–Ω—å —Ñ—ñ—Ç–Ω–µ—Å—É
    switch (profile.fitnessLevel.toLowerCase()) {
      case 'beginner':
        factors.add(DifficultyFactor(
          name: '–†—ñ–≤–µ–Ω—å —Ñ—ñ—Ç–Ω–µ—Å—É',
          description: '–ü–æ—á–∞—Ç–∫—ñ–≤–µ—Ü—å - –∑–Ω–∏–∂–µ–Ω–∞ –≤–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å',
          impact: 0.3,
          category: 'fitness',
          isPositive: false,
        ));
        break;
      case 'intermediate':
        factors.add(DifficultyFactor(
          name: '–†—ñ–≤–µ–Ω—å —Ñ—ñ—Ç–Ω–µ—Å—É',
          description: '–°–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å - –ø–æ–º—ñ—Ä–Ω–∞ –≤–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å',
          impact: 0.1,
          category: 'fitness',
          isPositive: false,
        ));
        break;
      case 'advanced':
        factors.add(DifficultyFactor(
          name: '–†—ñ–≤–µ–Ω—å —Ñ—ñ—Ç–Ω–µ—Å—É',
          description: '–ü—Ä–æ—Å—É–Ω—É—Ç–∏–π —Ä—ñ–≤–µ–Ω—å - –≤–∏—Å–æ–∫–∞ –≤–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å',
          impact: -0.1,
          category: 'fitness',
          isPositive: true,
        ));
        break;
      case 'expert':
        factors.add(DifficultyFactor(
          name: '–†—ñ–≤–µ–Ω—å —Ñ—ñ—Ç–Ω–µ—Å—É',
          description: '–ï–∫—Å–ø–µ—Ä—Ç–Ω–∏–π —Ä—ñ–≤–µ–Ω—å - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –≤–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å',
          impact: -0.2,
          category: 'fitness',
          isPositive: true,
        ));
        break;
    }

    // –î–æ—Å–≤—ñ–¥ (–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—ó–∑–¥–æ–∫)
    if (profile.totalRides > 100) {
      factors.add(DifficultyFactor(
        name: '–î–æ—Å–≤—ñ–¥',
        description: '–í–µ–ª–∏–∫–∏–π –¥–æ—Å–≤—ñ–¥ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∏—Å—Ç–∞',
        impact: -0.15,
        category: 'experience',
        isPositive: true,
      ));
    } else if (profile.totalRides < 10) {
      factors.add(DifficultyFactor(
        name: '–î–æ—Å–≤—ñ–¥',
        description: '–ú–∞–ª–∏–π –¥–æ—Å–≤—ñ–¥ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∏—Å—Ç–∞',
        impact: 0.2,
        category: 'experience',
        isPositive: false,
      ));
    }

    return factors;
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ñ–∞–∫—Ç–æ—Ä—ñ–≤ health-–º–µ—Ç—Ä–∏–∫
  List<DifficultyFactor> _calculateHealthFactors(HealthMetrics health) {
    final factors = <DifficultyFactor>[];

    // –ü—É–ª—å—Å —Å–ø–æ–∫–æ—é
    if (health.restingHeartRate != null) {
      if (health.restingHeartRate! > 80) {
        factors.add(DifficultyFactor(
          name: '–ü—É–ª—å—Å —Å–ø–æ–∫–æ—é',
          description: '–í–∏—Å–æ–∫–∏–π –ø—É–ª—å—Å —Å–ø–æ–∫–æ—é - –∑–Ω–∏–∂–µ–Ω–∞ –≤–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å',
          impact: 0.2,
          category: 'health',
          isPositive: false,
        ));
      } else if (health.restingHeartRate! < 60) {
        factors.add(DifficultyFactor(
          name: '–ü—É–ª—å—Å —Å–ø–æ–∫–æ—é',
          description: '–ù–∏–∑—å–∫–∏–π –ø—É–ª—å—Å —Å–ø–æ–∫–æ—é - –≤–∏—Å–æ–∫–∞ –≤–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å',
          impact: -0.1,
          category: 'health',
          isPositive: true,
        ));
      }
    }

    // –Ø–∫—ñ—Å—Ç—å —Å–Ω—É
    if (health.sleepQuality != null) {
      if (health.sleepQuality! < 0.6) {
        factors.add(DifficultyFactor(
          name: '–Ø–∫—ñ—Å—Ç—å —Å–Ω—É',
          description: '–ü–æ–≥–∞–Ω–∞ —è–∫—ñ—Å—Ç—å —Å–Ω—É - –∑–Ω–∏–∂–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å',
          impact: 0.15,
          category: 'health',
          isPositive: false,
        ));
      } else if (health.sleepQuality! > 0.8) {
        factors.add(DifficultyFactor(
          name: '–Ø–∫—ñ—Å—Ç—å —Å–Ω—É',
          description: '–í—ñ–¥–º—ñ–Ω–Ω–∞ —è–∫—ñ—Å—Ç—å —Å–Ω—É - –ø—ñ–¥–≤–∏—â–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å',
          impact: -0.1,
          category: 'health',
          isPositive: true,
        ));
      }
    }

    // –†—ñ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—É
    if (health.stressLevel != null) {
      if (health.stressLevel! > 0.7) {
        factors.add(DifficultyFactor(
          name: '–†—ñ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—É',
          description: '–í–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—É - –∑–Ω–∏–∂–µ–Ω–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—è',
          impact: 0.1,
          category: 'health',
          isPositive: false,
        ));
      }
    }

    // –û—Ü—ñ–Ω–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è
    if (health.recoveryScore != null) {
      if (health.recoveryScore! < 0.5) {
        factors.add(DifficultyFactor(
          name: '–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è',
          description: '–ù–∏–∑—å–∫–∞ –æ—Ü—ñ–Ω–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è - –∑–Ω–∏–∂–µ–Ω–∞ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å',
          impact: 0.2,
          category: 'health',
          isPositive: false,
        ));
      } else if (health.recoveryScore! > 0.8) {
        factors.add(DifficultyFactor(
          name: '–í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è',
          description: '–í–∏—Å–æ–∫–∞ –æ—Ü—ñ–Ω–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è - –ø—ñ–¥–≤–∏—â–µ–Ω–∞ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å',
          impact: -0.15,
          category: 'health',
          isPositive: true,
        ));
      }
    }

    return factors;
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ñ–∞–∫—Ç–æ—Ä—ñ–≤ –ø–æ–≥–æ–¥–∏
  List<DifficultyFactor> _calculateWeatherFactors(WeatherData weather) {
    final factors = <DifficultyFactor>[];

    // –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    if (weather.temperature < 5.0) {
      factors.add(DifficultyFactor(
        name: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
        description: '–•–æ–ª–æ–¥–Ω–∞ –ø–æ–≥–æ–¥–∞ - –∑–Ω–∏–∂–µ–Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å',
        impact: 0.1,
        category: 'weather',
        isPositive: false,
      ));
    } else if (weather.temperature > 30.0) {
      factors.add(DifficultyFactor(
        name: '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
        description: '–°–ø–µ–∫–æ—Ç–Ω–∞ –ø–æ–≥–æ–¥–∞ - –∑–Ω–∏–∂–µ–Ω–∞ –≤–∏—Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å',
        impact: 0.15,
        category: 'weather',
        isPositive: false,
      ));
    }

    // –í–∏–¥–∏–º—ñ—Å—Ç—å
    if (weather.visibility < 5.0) {
      factors.add(DifficultyFactor(
        name: '–í–∏–¥–∏–º—ñ—Å—Ç—å',
        description: '–ü–æ–≥–∞–Ω–∞ –≤–∏–¥–∏–º—ñ—Å—Ç—å - –∑–Ω–∏–∂–µ–Ω–∞ –±–µ–∑–ø–µ–∫–∞',
        impact: 0.1,
        category: 'weather',
        isPositive: false,
      ));
    }

    return factors;
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ñ–∞–∫—Ç–æ—Ä—ñ–≤ –ø–æ–∫—Ä–∏—Ç—Ç—è –¥–æ—Ä–æ–≥–∏
  List<DifficultyFactor> _calculateSurfaceFactors(RoadSurface surface) {
    final factors = <DifficultyFactor>[];

    // –†—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –ø–æ–∫—Ä–∏—Ç—Ç—è –º–∞—é—Ç—å —Ä—ñ–∑–Ω–∏–π –≤–ø–ª–∏–≤
    switch (surface) {
      case RoadSurface.gravel:
        factors.add(DifficultyFactor(
          name: '–ü–æ–∫—Ä–∏—Ç—Ç—è',
          description: '–ì—Ä–∞–≤—ñ–π - –∑–Ω–∏–∂–µ–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å',
          impact: 0.1,
          category: 'surface',
          isPositive: false,
        ));
        break;
      case RoadSurface.dirt:
        factors.add(DifficultyFactor(
          name: '–ü–æ–∫—Ä–∏—Ç—Ç—è',
          description: '“ê—Ä—É–Ω—Ç - –∑–Ω–∞—á–Ω–æ –∑–Ω–∏–∂–µ–Ω–∞ —à–≤–∏–¥–∫—ñ—Å—Ç—å',
          impact: 0.2,
          category: 'surface',
          isPositive: false,
        ));
        break;
      case RoadSurface.mud:
        factors.add(DifficultyFactor(
          name: '–ü–æ–∫—Ä–∏—Ç—Ç—è',
          description: '–ë–∞–≥–Ω–æ - –∫—Ä–∏—Ç–∏—á–Ω–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å',
          impact: 0.3,
          category: 'surface',
          isPositive: false,
        ));
        break;
      default:
        // –ê—Å—Ñ–∞–ª—å—Ç, –±–µ—Ç–æ–Ω - –±–µ–∑ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ –≤–ø–ª–∏–≤—É
        break;
    }

    return factors;
  }

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–Ω–æ–∂–Ω–∏–∫–∞ –ø—Ä–æ—Ñ—ñ–ª—é
  double _getProfileMultiplier(List<DifficultyFactor> factors) {
    double multiplier = 1.0;
    for (final factor in factors) {
      if (factor.category == 'age' || factor.category == 'fitness' || factor.category == 'experience') {
        multiplier += factor.impact;
      }
    }
    return max(0.5, min(2.0, multiplier)); // –û–±–º–µ–∂—É—î–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω
  }

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–Ω–æ–∂–Ω–∏–∫–∞ health-–º–µ—Ç—Ä–∏–∫
  double _getHealthMultiplier(List<DifficultyFactor> factors) {
    double multiplier = 1.0;
    for (final factor in factors) {
      if (factor.category == 'health') {
        multiplier += factor.impact;
      }
    }
    return max(0.5, min(2.0, multiplier)); // –û–±–º–µ–∂—É—î–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω
  }

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–Ω–æ–∂–Ω–∏–∫–∞ –ø–æ–≥–æ–¥–∏
  double _getWeatherMultiplier(List<DifficultyFactor> factors) {
    double multiplier = 1.0;
    for (final factor in factors) {
      if (factor.category == 'weather') {
        multiplier += factor.impact;
      }
    }
    return max(0.5, min(2.0, multiplier)); // –û–±–º–µ–∂—É—î–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω
  }

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–Ω–æ–∂–Ω–∏–∫–∞ –ø–æ–∫—Ä–∏—Ç—Ç—è
  double _getSurfaceMultiplier(List<DifficultyFactor> factors) {
    double multiplier = 1.0;
    for (final factor in factors) {
      if (factor.category == 'surface') {
        multiplier += factor.impact;
      }
    }
    return max(0.5, min(2.0, multiplier)); // –û–±–º–µ–∂—É—î–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω
  }

  /// –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
  DifficultyLevel _getDifficultyLevel(double difficulty) {
    if (difficulty < 2.0) return DifficultyLevel.easy;
    if (difficulty < 4.0) return DifficultyLevel.moderate;
    if (difficulty < 6.0) return DifficultyLevel.hard;
    if (difficulty < 8.0) return DifficultyLevel.veryHard;
    return DifficultyLevel.extreme;
  }
}
