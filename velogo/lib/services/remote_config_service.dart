import 'package:firebase_remote_config/firebase_remote_config.dart';
import 'dart:convert';

class RemoteConfigService {
  static final RemoteConfigService _instance = RemoteConfigService._internal();
  factory RemoteConfigService() => _instance;
  RemoteConfigService._internal();

  final FirebaseRemoteConfig _remoteConfig = FirebaseRemoteConfig.instance;

  // –ö–ª—é—á—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
  static const String _stormglassApiKey = 'stormglass_api_key';
  static const String _tomorrowApiKey = 'tomorrow_api_key';
  static const String _stormglassBaseUrl = 'stormglass_base_url';
  static const String _tomorrowBaseUrl = 'tomorrow_base_url';
  static const String _openMeteoBaseUrl = 'open_meteo_base_url';
  static const String _cacheExpirationMinutes = 'cache_expiration_minutes';
  static const String _maxCacheSize = 'max_cache_size';
  static const String _windParameters = 'wind_parameters';
  static const String _windSpeedUnit = 'wind_speed_unit';
  static const String _windDirectionUnit = 'wind_direction_unit';
  static const String _weatherEndpoint = 'weather_endpoint';
  static const String _forecastEndpoint = 'forecast_endpoint';
  static const String _syncIntervalMinutes = 'sync_interval_minutes';
  static const String _enableWeatherLogging = 'enable_weather_logging';
  static const String _primaryWeatherProvider = 'primary_weather_provider';

  // –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º (fallback)
  static const Map<String, dynamic> _defaults = {
    'stormglass_api_key': '0071dc8e-7200-11f0-b2b2-0242ac130006-0071dd38-7200-11f0-b2b2-0242ac130006',
    'tomorrow_api_key': 'WMYu7OiXcenM6ToxOMwNAAqWLAec4FVR',
    'stormglass_base_url': 'https://api.stormglass.io/v2',
    'tomorrow_base_url': 'https://api.tomorrow.io/v4',
    'open_meteo_base_url': 'https://api.open-meteo.com/v1',
    'cache_expiration_minutes': '60',
    'max_cache_size': '1000',
    'wind_parameters': '["windSpeed", "windDirection", "windGust"]',
    'wind_speed_unit': 'm/s',
    'wind_direction_unit': 'degrees',
    'weather_endpoint': '/weather',
    'forecast_endpoint': '/forecast',
    'sync_interval_minutes': '30',
    'enable_weather_logging': 'true',
    'primary_weather_provider': 'stormglass',
  };

  /// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Remote Config
  Future<void> initialize() async {
    try {
      // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
      await _remoteConfig.setDefaults(_defaults);

      // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏
      await _remoteConfig.setConfigSettings(RemoteConfigSettings(
        fetchTimeout: const Duration(minutes: 1),
        minimumFetchInterval: const Duration(hours: 1),
      ));

      // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é
      await _remoteConfig.fetchAndActivate();

      print('‚úÖ Remote Config —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
      _logCurrentConfig();
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Remote Config: $e');
    }
  }

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è API –∫–ª—é—á–∞ StormGlass
  String get stormglassApiKey => _remoteConfig.getString(_stormglassApiKey);

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è API –∫–ª—é—á–∞ Tomorrow.io
  String get tomorrowApiKey => _remoteConfig.getString(_tomorrowApiKey);

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–∑–æ–≤–æ–≥–æ URL StormGlass
  String get stormglassBaseUrl => _remoteConfig.getString(_stormglassBaseUrl);

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–∑–æ–≤–æ–≥–æ URL Tomorrow.io
  String get tomorrowBaseUrl => _remoteConfig.getString(_tomorrowBaseUrl);

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–∑–æ–≤–æ–≥–æ URL Open-Meteo
  String get openMeteoBaseUrl => _remoteConfig.getString(_openMeteoBaseUrl);

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —á–∞—Å—É –∂–∏—Ç—Ç—è –∫–µ—à—É –≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö
  int get cacheExpirationMinutes => int.tryParse(_remoteConfig.getString(_cacheExpirationMinutes)) ?? 60;

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É –∫–µ—à—É
  int get maxCacheSize => int.tryParse(_remoteConfig.getString(_maxCacheSize)) ?? 1000;

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –≤—ñ—Ç—Ä—É
  List<String> get windParameters {
    try {
      final jsonString = _remoteConfig.getString(_windParameters);
      final List<dynamic> list = jsonDecode(jsonString);
      return list.cast<String>();
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É wind_parameters: $e');
      return ['windSpeed', 'windDirection', 'windGust'];
    }
  }

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–¥–∏–Ω–∏—Ü—ñ –≤–∏–º—ñ—Ä—É —à–≤–∏–¥–∫–æ—Å—Ç—ñ –≤—ñ—Ç—Ä—É
  String get windSpeedUnit => _remoteConfig.getString(_windSpeedUnit);

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–¥–∏–Ω–∏—Ü—ñ –≤–∏–º—ñ—Ä—É –Ω–∞–ø—Ä—è–º—É –≤—ñ—Ç—Ä—É
  String get windDirectionUnit => _remoteConfig.getString(_windDirectionUnit);

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è endpoint –¥–ª—è –ø–æ–≥–æ–¥–∏
  String get weatherEndpoint => _remoteConfig.getString(_weatherEndpoint);

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è endpoint –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É
  String get forecastEndpoint => _remoteConfig.getString(_forecastEndpoint);

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –≤ —Ö–≤–∏–ª–∏–Ω–∞—Ö
  int get syncIntervalMinutes => int.tryParse(_remoteConfig.getString(_syncIntervalMinutes)) ?? 30;

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏
  bool get enableWeatherLogging => _remoteConfig.getBool(_enableWeatherLogging);

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ–≥–æ–¥–∏
  String get primaryWeatherProvider => _remoteConfig.getString(_primaryWeatherProvider);

  /// –ü—Ä–∏–º—É—Å–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  Future<bool> fetchAndActivate() async {
    try {
      final success = await _remoteConfig.fetchAndActivate();
      if (success) {
        print('‚úÖ Remote Config –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
        _logCurrentConfig();
      } else {
        print('‚ö†Ô∏è Remote Config –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è');
      }
      return success;
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Remote Config: $e');
      return false;
    }
  }

  /// –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
  void _logCurrentConfig() {
    print('üìã –ü–æ—Ç–æ—á–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Remote Config:');
    print('  StormGlass API Key: ${stormglassApiKey.substring(0, 10)}...');
    print('  Tomorrow API Key: ${tomorrowApiKey.substring(0, 10)}...');
    print('  Cache Expiration: ${cacheExpirationMinutes} min');
    print('  Max Cache Size: $maxCacheSize');
    print('  Primary Provider: $primaryWeatherProvider');
    print('  Weather Logging: $enableWeatherLogging');
  }

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —è–∫ Map
  Map<String, dynamic> getAllParameters() {
    return {
      'stormglass_api_key': stormglassApiKey,
      'tomorrow_api_key': tomorrowApiKey,
      'stormglass_base_url': stormglassBaseUrl,
      'tomorrow_base_url': tomorrowBaseUrl,
      'open_meteo_base_url': openMeteoBaseUrl,
      'cache_expiration_minutes': cacheExpirationMinutes,
      'max_cache_size': maxCacheSize,
      'wind_parameters': windParameters,
      'wind_speed_unit': windSpeedUnit,
      'wind_direction_unit': windDirectionUnit,
      'weather_endpoint': weatherEndpoint,
      'forecast_endpoint': forecastEndpoint,
      'sync_interval_minutes': syncIntervalMinutes,
      'enable_weather_logging': enableWeatherLogging,
      'primary_weather_provider': primaryWeatherProvider,
    };
  }
}
