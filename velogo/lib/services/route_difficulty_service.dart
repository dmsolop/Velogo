import 'dart:math';
import '../hive/models/weather_data.dart';
import '../models/road_surface.dart';
import 'log_service.dart';

/// –°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –º–∞—Ä—à—Ä—É—Ç—É
class RouteDifficultyService {
  static final RouteDifficultyService _instance = RouteDifficultyService._internal();
  factory RouteDifficultyService() => _instance;
  RouteDifficultyService._internal();

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –º–∞—Ä—à—Ä—É—Ç—É –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø–æ–≥–æ–¥–∏ —Ç–∞ –ø–æ–∫—Ä–∏—Ç—Ç—è
  double calculateRouteDifficulty(
    List<WeatherData> weatherDataList,
    List<RoadSurface> roadSurfaces,
    List<Map<String, double>> routePoints,
    DateTime startTime,
  ) {
    try {
      LogService.log('üéØ [RouteDifficultyService] –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –º–∞—Ä—à—Ä—É—Ç—É: ${routePoints.length} —Ç–æ—á–æ–∫');

      if (weatherDataList.isEmpty || roadSurfaces.isEmpty || routePoints.isEmpty) {
        LogService.log('‚ö†Ô∏è [RouteDifficultyService] –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É');
        return 0.0;
      }

      double totalDifficulty = 0.0;
      final averageSpeed = 15.0; // –∫–º/–≥–æ–¥ - —Å–µ—Ä–µ–¥–Ω—è —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤–µ–ª–æ—Å–∏–ø–µ–¥–∏—Å—Ç–∞

      for (int i = 0; i < routePoints.length; i++) {
        final point = routePoints[i];
        final weather = i < weatherDataList.length ? weatherDataList[i] : weatherDataList.last;
        final surface = i < roadSurfaces.length ? roadSurfaces[i] : RoadSurface.asphalt;

        // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —á–∞—Å –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è —Ü—ñ—î—ó —Ç–æ—á–∫–∏
        final distanceFromStart = _calculateDistanceFromStart(routePoints, i);
        final timeToReach = startTime.add(Duration(minutes: (distanceFromStart / averageSpeed * 60).round()));

        // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –¥–ª—è —Ü—ñ—î—ó —Ç–æ—á–∫–∏
        final pointDifficulty = _calculatePointDifficulty(weather, surface, timeToReach);
        totalDifficulty += pointDifficulty;

        LogService.log('üìç [RouteDifficultyService] –¢–æ—á–∫–∞ $i: —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å=${pointDifficulty.toStringAsFixed(2)}, –ø–æ–≤–µ—Ä—Ö–Ω—è=${surface.displayName}, —á–∞—Å=$timeToReach');
      }

      final averageDifficulty = totalDifficulty / routePoints.length;
      LogService.log('‚úÖ [RouteDifficultyService] –°–µ—Ä–µ–¥–Ω—è —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç—É: ${averageDifficulty.toStringAsFixed(2)}');

      return averageDifficulty;
    } catch (e) {
      LogService.log('‚ùå [RouteDifficultyService] –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ: $e');
      return 0.0;
    }
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –¥–ª—è –æ–¥–Ω—ñ—î—ó —Ç–æ—á–∫–∏
  double _calculatePointDifficulty(WeatherData weather, RoadSurface surface, DateTime time) {
    double difficulty = 0.0;

    // 1. –í–ø–ª–∏–≤ –≤—ñ—Ç—Ä—É
    difficulty += _calculateWindDifficulty(weather);

    // 2. –í–ø–ª–∏–≤ –æ–ø–∞–¥—ñ–≤ –Ω–∞ –ø–æ–∫—Ä–∏—Ç—Ç—è
    difficulty += _calculatePrecipitationDifficulty(weather, surface);

    // 3. –í–ø–ª–∏–≤ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏
    difficulty += _calculateTemperatureDifficulty(weather);

    // 4. –í–ø–ª–∏–≤ –≤–∏–¥–∏–º–æ—Å—Ç—ñ
    difficulty += _calculateVisibilityDifficulty(weather);

    // 5. –í–ø–ª–∏–≤ —á–∞—Å—É –¥–æ–±–∏
    difficulty += _calculateTimeDifficulty(time);

    return difficulty;
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–ø–ª–∏–≤—É –≤—ñ—Ç—Ä—É
  double _calculateWindDifficulty(WeatherData weather) {
    double difficulty = 0.0;

    // –ë–∞–∑–æ–≤–∏–π –≤–ø–ª–∏–≤ —à–≤–∏–¥–∫–æ—Å—Ç—ñ –≤—ñ—Ç—Ä—É
    difficulty += weather.windSpeed * 0.5;

    // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –≤–ø–ª–∏–≤ –ø–æ—Ä–∏–≤—ñ–≤
    if (weather.windGust > weather.windSpeed) {
      difficulty += (weather.windGust - weather.windSpeed) * 0.3;
    }

    // –í–ø–ª–∏–≤ –Ω–∞–ø—Ä—è–º–∫—É –≤—ñ—Ç—Ä—É (–ø—Ä–æ—Ç–∏ –≤—ñ—Ç—Ä—É = —Å–∫–ª–∞–¥–Ω—ñ—à–µ)
    final windDirection = weather.windDirection;
    if (windDirection >= 45 && windDirection <= 135) {
      difficulty += weather.windSpeed * 0.2; // –ü—Ä–æ—Ç–∏ –≤—ñ—Ç—Ä—É
    }

    return difficulty;
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–ø–ª–∏–≤—É –æ–ø–∞–¥—ñ–≤ –Ω–∞ –ø–æ–∫—Ä–∏—Ç—Ç—è
  double _calculatePrecipitationDifficulty(WeatherData weather, RoadSurface surface) {
    if (weather.precipitation == 0.0) {
      return 0.0; // –ë–µ–∑ –æ–ø–∞–¥—ñ–≤
    }

    double difficulty = 0.0;

    // –ë–∞–∑–æ–≤–∏–π –≤–ø–ª–∏–≤ –æ–ø–∞–¥—ñ–≤
    difficulty += weather.precipitation * 0.1;

    // –ö–æ—Ä–µ–∫—Ü—ñ—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–∏–ø—É –ø–æ–∫—Ä–∏—Ç—Ç—è
    difficulty *= surface.precipitationImpact;

    // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –≤–ø–ª–∏–≤ —Ç–∏–ø—É –æ–ø–∞–¥—ñ–≤
    if (weather.precipitationType == 2.0) {
      // –°–Ω—ñ–≥
      difficulty *= 1.5;
    }

    // –í–ø–ª–∏–≤ –≤–æ–ª–æ–≥–æ—Å—Ç—ñ
    if (weather.humidity > 80.0) {
      difficulty += 0.5;
    }

    return difficulty;
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–ø–ª–∏–≤—É —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏
  double _calculateTemperatureDifficulty(WeatherData weather) {
    double difficulty = 0.0;

    // –•–æ–ª–æ–¥–Ω–∞ –ø–æ–≥–æ–¥–∞
    if (weather.temperature < 5.0) {
      difficulty += (5.0 - weather.temperature) * 0.1;
    }

    // –ì–∞—Ä—è—á–∞ –ø–æ–≥–æ–¥–∞
    if (weather.temperature > 30.0) {
      difficulty += (weather.temperature - 30.0) * 0.05;
    }

    return difficulty;
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–ø–ª–∏–≤—É –≤–∏–¥–∏–º–æ—Å—Ç—ñ
  double _calculateVisibilityDifficulty(WeatherData weather) {
    if (weather.visibility >= 10.0) {
      return 0.0; // –•–æ—Ä–æ—à–∞ –≤–∏–¥–∏–º—ñ—Å—Ç—å
    }

    return (10.0 - weather.visibility) * 0.2;
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤–ø–ª–∏–≤—É —á–∞—Å—É –¥–æ–±–∏
  double _calculateTimeDifficulty(DateTime time) {
    final hour = time.hour;

    // –ù—ñ—á–Ω–∏–π —á–∞—Å (22:00 - 06:00)
    if (hour >= 22 || hour <= 6) {
      return 1.0;
    }

    // –†–∞–Ω–∫–æ–≤—ñ/–≤–µ—á—ñ—Ä–Ω—ñ –≥–æ–¥–∏–Ω–∏ –ø—ñ–∫
    if ((hour >= 7 && hour <= 9) || (hour >= 17 && hour <= 19)) {
      return 0.5;
    }

    return 0.0;
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –≤—ñ–¥ –ø–æ—á–∞—Ç–∫—É –º–∞—Ä—à—Ä—É—Ç—É
  double _calculateDistanceFromStart(List<Map<String, double>> routePoints, int currentIndex) {
    double totalDistance = 0.0;

    for (int i = 0; i < currentIndex; i++) {
      if (i + 1 < routePoints.length) {
        totalDistance += _calculateDistance(
          routePoints[i]['lat']!,
          routePoints[i]['lon']!,
          routePoints[i + 1]['lat']!,
          routePoints[i + 1]['lon']!,
        );
      }
    }

    return totalDistance;
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å—Ç–∞–Ω—ñ –º—ñ–∂ –¥–≤–æ–º–∞ —Ç–æ—á–∫–∞–º–∏ (–∫–º)
  double _calculateDistance(double lat1, double lon1, double lat2, double lon2) {
    const double earthRadius = 6371.0; // –∫–º

    final dLat = _toRadians(lat2 - lat1);
    final dLon = _toRadians(lon2 - lon1);

    final a = sin(dLat / 2) * sin(dLat / 2) + cos(_toRadians(lat1)) * cos(_toRadians(lat2)) * sin(dLon / 2) * sin(dLon / 2);

    final c = 2 * atan2(sqrt(a), sqrt(1 - a));

    return earthRadius * c;
  }

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≥—Ä–∞–¥—É—Å—ñ–≤ –≤ —Ä–∞–¥—ñ–∞–Ω–∏
  double _toRadians(double degrees) {
    return degrees * pi / 180.0;
  }

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä—ñ–≤–Ω—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ (—Ç–µ–∫—Å—Ç–æ–≤–∏–π –æ–ø–∏—Å)
  String getDifficultyLevel(double difficulty) {
    if (difficulty < 2.0) {
      return '–õ–µ–≥–∫–∏–π';
    } else if (difficulty < 4.0) {
      return '–ü–æ–º—ñ—Ä–Ω–∏–π';
    } else if (difficulty < 6.0) {
      return '–°–∫–ª–∞–¥–Ω–∏–π';
    } else if (difficulty < 8.0) {
      return '–î—É–∂–µ —Å–∫–ª–∞–¥–Ω–∏–π';
    } else {
      return '–ï–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∏–π';
    }
  }

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–ª—å–æ—Ä—É —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
  int getDifficultyColor(double difficulty) {
    if (difficulty < 2.0) {
      return 0xFF4CAF50; // –ó–µ–ª–µ–Ω–∏–π
    } else if (difficulty < 4.0) {
      return 0xFFFF9800; // –ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π
    } else if (difficulty < 6.0) {
      return 0xFFFF5722; // –ß–µ—Ä–≤–æ–Ω–∏–π
    } else if (difficulty < 8.0) {
      return 0xFF9C27B0; // –§—ñ–æ–ª–µ—Ç–æ–≤–∏–π
    } else {
      return 0xFF000000; // –ß–æ—Ä–Ω–∏–π
    }
  }
}
