import 'dart:convert';
import 'package:hive/hive.dart';
import '../features/weather/data/models/weather_data.dart';
import '../features/map/data/models/road_surface.dart';
import '../features/map/data/datasources/route_difficulty_service.dart';
import 'log_service.dart';

/// –ú–æ–¥–µ–ª—å –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —à–≤–∏–¥–∫–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
class UserSpeedStats {
  final String userId;
  final double averageSpeed; // –∫–º/–≥–æ–¥
  final Map<String, double> speedByDifficulty; // –®–≤–∏–¥–∫—ñ—Å—Ç—å –∑–∞ —Ä—ñ–≤–Ω–µ–º —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
  final Map<String, double> speedBySurface; // –®–≤–∏–¥–∫—ñ—Å—Ç—å –∑–∞ —Ç–∏–ø–æ–º –ø–æ–∫—Ä–∏—Ç—Ç—è
  final int totalRides;
  final DateTime lastUpdated;
  final DateTime createdAt;

  UserSpeedStats({
    required this.userId,
    required this.averageSpeed,
    required this.speedByDifficulty,
    required this.speedBySurface,
    required this.totalRides,
    required this.lastUpdated,
    required this.createdAt,
  });

  /// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑ JSON
  factory UserSpeedStats.fromJson(Map<String, dynamic> json) {
    return UserSpeedStats(
      userId: json['userId'],
      averageSpeed: json['averageSpeed']?.toDouble() ?? 15.0,
      speedByDifficulty: Map<String, double>.from(json['speedByDifficulty'] ?? {}),
      speedBySurface: Map<String, double>.from(json['speedBySurface'] ?? {}),
      totalRides: json['totalRides'] ?? 0,
      lastUpdated: DateTime.parse(json['lastUpdated']),
      createdAt: DateTime.parse(json['createdAt']),
    );
  }

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ JSON
  Map<String, dynamic> toJson() {
    return {
      'userId': userId,
      'averageSpeed': averageSpeed,
      'speedByDifficulty': speedByDifficulty,
      'speedBySurface': speedBySurface,
      'totalRides': totalRides,
      'lastUpdated': lastUpdated.toIso8601String(),
      'createdAt': createdAt.toIso8601String(),
    };
  }

  /// –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –∑ –Ω–æ–≤–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
  UserSpeedStats copyWith({
    String? userId,
    double? averageSpeed,
    Map<String, double>? speedByDifficulty,
    Map<String, double>? speedBySurface,
    int? totalRides,
    DateTime? lastUpdated,
    DateTime? createdAt,
  }) {
    return UserSpeedStats(
      userId: userId ?? this.userId,
      averageSpeed: averageSpeed ?? this.averageSpeed,
      speedByDifficulty: speedByDifficulty ?? this.speedByDifficulty,
      speedBySurface: speedBySurface ?? this.speedBySurface,
      totalRides: totalRides ?? this.totalRides,
      lastUpdated: lastUpdated ?? this.lastUpdated,
      createdAt: createdAt ?? this.createdAt,
    );
  }
}

/// –°–µ—Ä–≤—ñ—Å –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Ç–∞ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏—Ö —à–≤–∏–¥–∫–æ—Å—Ç–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
class UserSpeedService {
  static final UserSpeedService _instance = UserSpeedService._internal();
  factory UserSpeedService() => _instance;
  UserSpeedService._internal();

  final Map<String, UserSpeedStats> _userStats = {};
  final String _statsBoxName = "user_speed_stats";
  final RouteDifficultyService _routeDifficultyService = RouteDifficultyService();

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ—ó —à–≤–∏–¥–∫–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
  double getUserSpeedForDifficulty(String userId, double difficulty) {
    try {
      final stats = _userStats[userId];
      if (stats == null) {
        LogService.log('‚ö†Ô∏è [UserSpeedService] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: $userId');
        return 15.0; // –®–≤–∏–¥–∫—ñ—Å—Ç—å –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
      }

      // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
      final difficultyLevel = _routeDifficultyService.getDifficultyLevel(difficulty);
      final speedForDifficulty = stats.speedByDifficulty[difficultyLevel];

      if (speedForDifficulty != null) {
        LogService.log('üèÉ [UserSpeedService] –®–≤–∏–¥–∫—ñ—Å—Ç—å –¥–ª—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ $difficultyLevel: ${speedForDifficulty}–∫–º/–≥–æ–¥');
        return speedForDifficulty;
      }

      // –Ø–∫—â–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Ü—ñ—î—ó —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å–µ—Ä–µ–¥–Ω—é
      LogService.log('üèÉ [UserSpeedService] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å–µ—Ä–µ–¥–Ω—é —à–≤–∏–¥–∫—ñ—Å—Ç—å: ${stats.averageSpeed}–∫–º/–≥–æ–¥');
      return stats.averageSpeed;
    } catch (e) {
      LogService.log('‚ùå [UserSpeedService] –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ: $e');
      return 15.0;
    }
  }

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–Ω—å–æ—ó —à–≤–∏–¥–∫–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø—É –ø–æ–∫—Ä–∏—Ç—Ç—è
  double getUserSpeedForSurface(String userId, RoadSurface surface) {
    try {
      final stats = _userStats[userId];
      if (stats == null) {
        LogService.log('‚ö†Ô∏è [UserSpeedService] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: $userId');
        return 15.0;
      }

      final surfaceKey = surface.displayName;
      final speedForSurface = stats.speedBySurface[surfaceKey];

      if (speedForSurface != null) {
        LogService.log('üèÉ [UserSpeedService] –®–≤–∏–¥–∫—ñ—Å—Ç—å –¥–ª—è –ø–æ–∫—Ä–∏—Ç—Ç—è $surfaceKey: ${speedForSurface}–∫–º/–≥–æ–¥');
        return speedForSurface;
      }

      LogService.log('üèÉ [UserSpeedService] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å–µ—Ä–µ–¥–Ω—é —à–≤–∏–¥–∫—ñ—Å—Ç—å: ${stats.averageSpeed}–∫–º/–≥–æ–¥');
      return stats.averageSpeed;
    } catch (e) {
      LogService.log('‚ùå [UserSpeedService] –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ –¥–ª—è –ø–æ–∫—Ä–∏—Ç—Ç—è: $e');
      return 15.0;
    }
  }

  /// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –º–∞—Ä—à—Ä—É—Ç—É
  Future<void> updateUserStats(
    String userId,
    List<Map<String, double>> routePoints,
    List<WeatherData> weatherData,
    List<RoadSurface> roadSurfaces,
    double actualAverageSpeed,
    Duration rideDuration,
  ) async {
    try {
      LogService.log('üìä [UserSpeedService] –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: $userId');

      final stats = _userStats[userId] ?? _createDefaultStats(userId);

      // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å –¥–ª—è –∫–æ–∂–Ω–æ—ó —Ç–æ—á–∫–∏
      final difficulties = <double>[];
      for (int i = 0; i < routePoints.length; i++) {
        final weather = i < weatherData.length ? weatherData[i] : weatherData.last;
        final surface = i < roadSurfaces.length ? roadSurfaces[i] : RoadSurface.asphalt;

        final difficulty = _routeDifficultyService.calculateRouteDifficulty(
          [weather],
          [surface],
          [routePoints[i]],
          DateTime.now(),
        );
        difficulties.add(difficulty);
      }

      // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      final updatedStats = _updateStats(stats, difficulties, roadSurfaces, actualAverageSpeed);
      _userStats[userId] = updatedStats;

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –∫–µ—à
      await _saveStatsToCache();

      LogService.log('‚úÖ [UserSpeedService] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞: —Å–µ—Ä–µ–¥–Ω—è —à–≤–∏–¥–∫—ñ—Å—Ç—å=${updatedStats.averageSpeed}–∫–º/–≥–æ–¥, –ø–æ—ó–∑–¥–æ–∫=${updatedStats.totalRides}');
    } catch (e) {
      LogService.log('‚ùå [UserSpeedService] –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e');
    }
  }

  /// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
  UserSpeedStats _createDefaultStats(String userId) {
    return UserSpeedStats(
      userId: userId,
      averageSpeed: 15.0,
      speedByDifficulty: {
        '–õ–µ–≥–∫–∏–π': 18.0,
        '–ü–æ–º—ñ—Ä–Ω–∏–π': 15.0,
        '–°–∫–ª–∞–¥–Ω–∏–π': 12.0,
        '–î—É–∂–µ —Å–∫–ª–∞–¥–Ω–∏–π': 9.0,
        '–ï–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∏–π': 6.0,
      },
      speedBySurface: {
        '–ê—Å—Ñ–∞–ª—å—Ç': 18.0,
        '–ë–µ—Ç–æ–Ω': 17.0,
        '–ì—Ä–∞–≤—ñ–π': 14.0,
        '“ê—Ä—É–Ω—Ç': 12.0,
        '–ë–∞–≥–Ω–æ': 8.0,
      },
      totalRides: 0,
      lastUpdated: DateTime.now(),
      createdAt: DateTime.now(),
    );
  }

  /// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
  UserSpeedStats _updateStats(
    UserSpeedStats stats,
    List<double> difficulties,
    List<RoadSurface> roadSurfaces,
    double actualAverageSpeed,
  ) {
    // –û–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É —Å–µ—Ä–µ–¥–Ω—é —à–≤–∏–¥–∫—ñ—Å—Ç—å
    final newAverageSpeed = _calculateWeightedAverage(
      stats.averageSpeed,
      actualAverageSpeed,
      stats.totalRides,
    );

    // –û–Ω–æ–≤–ª—é—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –∑–∞ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—é
    final updatedSpeedByDifficulty = Map<String, double>.from(stats.speedByDifficulty);
    for (final difficulty in difficulties) {
      final difficultyLevel = _routeDifficultyService.getDifficultyLevel(difficulty);
      final currentSpeed = updatedSpeedByDifficulty[difficultyLevel] ?? stats.averageSpeed;
      final newSpeed = _calculateWeightedAverage(currentSpeed, actualAverageSpeed, 1);
      updatedSpeedByDifficulty[difficultyLevel] = newSpeed;
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ —à–≤–∏–¥–∫—ñ—Å—Ç—å –∑–∞ –ø–æ–∫—Ä–∏—Ç—Ç—è–º
    final updatedSpeedBySurface = Map<String, double>.from(stats.speedBySurface);
    for (final surface in roadSurfaces) {
      final surfaceKey = surface.displayName;
      final currentSpeed = updatedSpeedBySurface[surfaceKey] ?? stats.averageSpeed;
      final newSpeed = _calculateWeightedAverage(currentSpeed, actualAverageSpeed, 1);
      updatedSpeedBySurface[surfaceKey] = newSpeed;
    }

    return stats.copyWith(
      averageSpeed: newAverageSpeed,
      speedByDifficulty: updatedSpeedByDifficulty,
      speedBySurface: updatedSpeedBySurface,
      totalRides: stats.totalRides + 1,
      lastUpdated: DateTime.now(),
    );
  }

  /// –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–≤–∞–∂–µ–Ω–æ—ó —Å–µ—Ä–µ–¥–Ω—å–æ—ó
  double _calculateWeightedAverage(double currentAverage, double newValue, int currentCount) {
    if (currentCount == 0) return newValue;

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –µ–∫—Å–ø–æ–Ω–µ–Ω—Ü—ñ–∞–ª—å–Ω–µ –∑–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è
    const double alpha = 0.3; // –ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∑–≥–ª–∞–¥–∂—É–≤–∞–Ω–Ω—è
    return currentAverage * (1 - alpha) + newValue * alpha;
  }

  /// –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)
  Future<void> periodicUpdate() async {
    try {
      LogService.log('üîÑ [UserSpeedService] –ü–µ—Ä—ñ–æ–¥–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');

      for (final stats in _userStats.values) {
        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (—Ä–∞–∑ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å)
        final daysSinceUpdate = DateTime.now().difference(stats.lastUpdated).inDays;
        if (daysSinceUpdate >= 7) {
          // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
          // –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –∑–º–µ–Ω—à–µ–Ω–Ω—è –≤–∞–≥–∏ —Å—Ç–∞—Ä–∏—Ö –¥–∞–Ω–∏—Ö
          LogService.log('üìä [UserSpeedService] –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${stats.userId}');
        }
      }

      await _saveStatsToCache();
    } catch (e) {
      LogService.log('‚ùå [UserSpeedService] –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: $e');
    }
  }

  /// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –∫–µ—à
  Future<void> _saveStatsToCache() async {
    try {
      final box = await Hive.openBox<String>(_statsBoxName);

      for (final stats in _userStats.values) {
        await box.put(stats.userId, jsonEncode(stats.toJson()));
      }

      LogService.log('üíæ [UserSpeedService] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ –∫–µ—à');
    } catch (e) {
      LogService.log('‚ùå [UserSpeedService] –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e');
    }
  }

  /// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑ –∫–µ—à—É
  Future<void> _loadStatsFromCache() async {
    try {
      final box = await Hive.openBox<String>(_statsBoxName);

      for (final key in box.keys) {
        final statsJson = jsonDecode(box.get(key)!);
        final stats = UserSpeedStats.fromJson(statsJson);
        _userStats[stats.userId] = stats;
      }

      LogService.log('üì¶ [UserSpeedService] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞ –∑ –∫–µ—à—É: ${_userStats.length} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤');
    } catch (e) {
      LogService.log('‚ùå [UserSpeedService] –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e');
    }
  }

  /// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–≤—ñ—Å—É
  Future<void> initialize() async {
    await _loadStatsFromCache();
  }

  /// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  UserSpeedStats? getUserStats(String userId) {
    return _userStats[userId];
  }

  /// –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
  Future<void> clearUserStats(String userId) async {
    _userStats.remove(userId);
    final box = await Hive.openBox<String>(_statsBoxName);
    await box.delete(userId);
    LogService.log('üóëÔ∏è [UserSpeedService] –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–∏—â–µ–Ω–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: $userId');
  }
}
