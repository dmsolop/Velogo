// Mocks generated by Mockito 5.4.4 from annotations
// in velogo/test/domain/navigation/save_navigation_state_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:velogo/core/error/failures.dart' as _i5;
import 'package:velogo/features/navigation/domain/entities/navigation_entity.dart'
    as _i6;
import 'package:velogo/features/navigation/domain/repositories/navigation_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NavigationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationRepository extends _i1.Mock
    implements _i3.NavigationRepository {
  MockNavigationRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.NavigationEntity>>
      getCurrentNavigation() => (super.noSuchMethod(
            Invocation.method(
              #getCurrentNavigation,
              [],
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i6.NavigationEntity>>.value(
                    _FakeEither_0<_i5.Failure, _i6.NavigationEntity>(
              this,
              Invocation.method(
                #getCurrentNavigation,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, _i6.NavigationEntity>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> saveNavigationState(
          _i6.NavigationEntity? navigationState) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveNavigationState,
          [navigationState],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #saveNavigationState,
            [navigationState],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> clearNavigationHistory() =>
      (super.noSuchMethod(
        Invocation.method(
          #clearNavigationHistory,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #clearNavigationHistory,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}
